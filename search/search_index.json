{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#important-update","title":"\ud83d\udce2 Important Update \ud83d\udce2","text":"<p>We are excited to announce that Beanie is transitioning from solo development to a team-based approach! This move will help us enhance the project with new features and more collaborative development.</p> <p>At this moment we are establishing a board of members that will decide all the future steps of the project. We are looking for contributors and maintainers to join the board.</p>"},{"location":"#join-us","title":"Join Us","text":"<p>If you are interested in contributing or want to stay updated, please join our Discord channel. We're looking forward to your ideas and contributions!</p> <p>Join our Discord</p> <p>Let\u2019s make Beanie better, together!</p>"},{"location":"#overview","title":"Overview","text":"<p>Beanie - is an asynchronous Python object-document mapper (ODM) for MongoDB. Data models are based on Pydantic.</p> <p>When using Beanie each database collection has a corresponding <code>Document</code> that is used to interact with that collection. In addition to retrieving data, Beanie allows you to add, update, or delete documents from the collection as well.</p> <p>Beanie saves you time by removing boilerplate code, and it helps you focus on the parts of your app that actually matter.</p> <p>Data and schema migrations are supported by Beanie out of the box.</p> <p>There is a synchronous version of Beanie ODM - Bunnet</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#pip","title":"PIP","text":"<pre><code>pip install beanie\n</code></pre>"},{"location":"#poetry","title":"Poetry","text":"<pre><code>poetry add beanie\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import asyncio\nfrom typing import Optional\n\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed, init_beanie\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\nclass Product(Document):\n    name: str                          # You can use normal types just like in pydantic\n    description: Optional[str] = None\n    price: Indexed(float)              # You can also specify that a field should correspond to an index\n    category: Category                 # You can include pydantic models as well\n\n\n# This is an asynchronous example, so we will access it from an async function\nasync def example():\n    # Beanie uses Motor async client under the hood \n    client = AsyncIOMotorClient(\"mongodb://user:pass@host:27017\")\n\n    # Initialize beanie with the Product document class\n    await init_beanie(database=client.db_name, document_models=[Product])\n\n    chocolate = Category(name=\"Chocolate\", description=\"A preparation of roasted and ground cacao seeds.\")\n    # Beanie documents work just like pydantic models\n    tonybar = Product(name=\"Tony's\", price=5.95, category=chocolate)\n    # And can be inserted into the database\n    await tonybar.insert() \n\n    # You can find documents with pythonic syntax\n    product = await Product.find_one(Product.price &lt; 10)\n\n    # And update them\n    await product.set({Product.name:\"Gold bar\"})\n\n\nif __name__ == \"__main__\":\n    asyncio.run(example())\n</code></pre>"},{"location":"#links","title":"Links","text":""},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Doc - Tutorial, API documentation, and development guidelines.</li> </ul>"},{"location":"#example-projects","title":"Example Projects","text":"<ul> <li>fastapi-cosmos-beanie - FastAPI + Beanie ODM + Azure Cosmos Demo Application by Anthony Shaw</li> <li>fastapi-beanie-jwt -    Sample FastAPI server with JWT auth and Beanie ODM by Michael duPont</li> <li>Shortify - URL shortener RESTful API (FastAPI + Beanie ODM + JWT &amp; OAuth2) by  Iliya Hosseini</li> <li>LCCN Predictor - Leetcode contest rating predictor (FastAPI + Beanie ODM + React) by L. Bao</li> </ul>"},{"location":"#articles","title":"Articles","text":"<ul> <li>Announcing Beanie - MongoDB ODM</li> <li>Build a Cocktail API with Beanie and MongoDB</li> <li>MongoDB indexes with Beanie</li> <li>Beanie Projections. Reducing network and database load.</li> <li>Beanie 1.0 - Query Builder</li> <li>Beanie 1.8 - Relations, Cache, Actions and more!</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>GitHub - GitHub page of the   project</li> <li>Changelog - list of all   the valuable changes</li> <li>Discord - ask your questions, share   ideas or just say <code>Hello!!</code></li> </ul> <p>Supported by JetBrains</p> <p></p>"},{"location":"changelog/","title":"Changelog","text":"<p>Beanie project</p>"},{"location":"changelog/#1290-2025-01-06","title":"1.29.0 - 2025-01-06","text":""},{"location":"changelog/#fix-serialization-of-linkbacklink-and-openapi-schema-generation","title":"Fix serialization of link/backlink and openapi schema generation","text":"<ul> <li>Author - staticxterm</li> <li>PR https://github.com/BeanieODM/beanie/pull/1080</li> </ul>"},{"location":"changelog/#fix-owner-model-missing-in-init_beanie-in-inheritance-documentations-inserts-example","title":"Fix: <code>owner</code> model missing in <code>init_beanie</code> in inheritance documentation's inserts example","text":"<ul> <li>Author - ksayer</li> <li>PR https://github.com/BeanieODM/beanie/pull/1090</li> </ul>"},{"location":"changelog/#make-diacritic_sensitive-parameter-optional-to-support-text-operator-on-cosmos-db","title":"Make <code>diacritic_sensitive</code> parameter optional to support $text operator on cosmos db","text":"<ul> <li>Author - mykolaskrynnyk</li> <li>PR https://github.com/BeanieODM/beanie/pull/1089</li> </ul>"},{"location":"changelog/#add-tests-with-case-of-id-in-fastapi-path","title":"Add tests with case of {id} in fastapi path","text":"<ul> <li>Author - dantetemplar</li> <li>PR https://github.com/BeanieODM/beanie/pull/1100</li> </ul>"},{"location":"changelog/#use-strings-to-specify-mongodb-versions-in-ci","title":"Use strings to specify mongodb versions in ci","text":"<ul> <li>Author - Viicos</li> <li>PR https://github.com/BeanieODM/beanie/pull/1094</li> </ul>"},{"location":"changelog/#fix-pydantic-210x-breaking-change","title":"fix: pydantic 2.10.x breaking change","text":"<ul> <li>Author - mdaffad</li> <li>PR https://github.com/BeanieODM/beanie/pull/1095</li> </ul>"},{"location":"changelog/#bulk-writer-improving-bulk_writer-method-for-document-and-possibility-to-bypass-mongo-document-validation-comment-parameter","title":"Bulk writer improving &amp; bulk_writer method for document and possibility to bypass mongo document validation + comment parameter","text":"<ul> <li>Author - CAPITAINMARVEL</li> <li>PR https://github.com/BeanieODM/beanie/pull/1079</li> </ul>"},{"location":"changelog/#add-coverage-configuration-to-pyprojecttoml","title":"Add coverage configuration to pyproject.toml","text":"<ul> <li>Author - staticxterm</li> <li>PR https://github.com/BeanieODM/beanie/pull/1091</li> </ul>"},{"location":"changelog/#1280-2024-12-05","title":"1.28.0 - 2024-12-05","text":""},{"location":"changelog/#fix-kwargsargs-untyped","title":"Fix kwargs/args untyped","text":"<ul> <li>Author - CAPITAINMARVEL</li> <li>PR https://github.com/BeanieODM/beanie/pull/1049</li> </ul>"},{"location":"changelog/#update-pre-commit","title":"Update pre-commit","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/1046</li> </ul>"},{"location":"changelog/#drop-support-for-python-37","title":"Drop support for python 3.7","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/1044</li> </ul>"},{"location":"changelog/#add-missing-type-hint-to-find_many_in_all-method","title":"Add missing type hint to <code>find_many_in_all</code> method","text":"<ul> <li>Author - vasuman</li> <li>PR https://github.com/BeanieODM/beanie/pull/1068</li> </ul>"},{"location":"changelog/#add-documentdb-compatibility-to-fetch_links","title":"Add documentdb compatibility to fetch_links","text":"<ul> <li>Author - whitfin</li> <li>PR https://github.com/BeanieODM/beanie/pull/1042</li> </ul>"},{"location":"changelog/#fix-issues-caused-by-1044","title":"Fix issues caused by #1044","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/1053</li> </ul>"},{"location":"changelog/#featskip_index-possibility-added-to-skip-index-actions","title":"Feat(skip_index): possibility added to skip index actions","text":"<ul> <li>Author - jorma16</li> <li>PR https://github.com/BeanieODM/beanie/pull/942</li> </ul>"},{"location":"changelog/#fix-pydanticobjectid-fields-being-parsed-into-str","title":"Fix pydanticobjectid fields being parsed into str","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/1060</li> </ul>"},{"location":"changelog/#modify-tests-to-not-raise-deprecation-warnings","title":"Modify tests to not raise deprecation warnings","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/1047</li> </ul>"},{"location":"changelog/#add-python-313-and-jit-into-testing","title":"Add python 3.13 and jit into testing","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/1051</li> </ul>"},{"location":"changelog/#handle-limit-and-session-in-count-method","title":"Handle limit and session in .count() method","text":"<ul> <li>Author - CAPITAINMARVEL</li> <li>PR https://github.com/BeanieODM/beanie/pull/1040</li> </ul>"},{"location":"changelog/#1270-2024-10-06","title":"1.27.0 - 2024-10-06","text":""},{"location":"changelog/#add-tests-on-all-major-mongo-version","title":"Add tests on all major mongo version","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/1034</li> </ul>"},{"location":"changelog/#fix-return-type-from-document-update","title":"Fix return type from document update","text":"<ul> <li>Author - CAPITAINMARVEL</li> <li>PR https://github.com/BeanieODM/beanie/pull/1030</li> </ul>"},{"location":"changelog/#fix-expression-type-hint-not-allowing-some-type-httpsgithubcombeanieodmbeanieissues1020","title":"Fix expression type hint not allowing some type https://github.com/beanieodm/beanie/issues/1020","text":"<ul> <li>Author - CAPITAINMARVEL</li> <li>PR https://github.com/BeanieODM/beanie/pull/1023</li> </ul>"},{"location":"changelog/#fix-type-hint-using-pymongo-client-session-instead-of-motor-client-session","title":"Fix type hint using pymongo client session instead of motor client session","text":"<ul> <li>Author - CAPITAINMARVEL</li> <li>PR https://github.com/BeanieODM/beanie/pull/1022</li> </ul>"},{"location":"changelog/#fix-logical-operator-typing-1000","title":"Fix logical operator typing #1000","text":"<ul> <li>Author - janas-adam</li> <li>PR https://github.com/BeanieODM/beanie/pull/1021</li> </ul>"},{"location":"changelog/#use-session-in-document-insert","title":"Use session in document insert","text":"<ul> <li>Author - andraghetti</li> <li>PR https://github.com/BeanieODM/beanie/pull/1018</li> </ul>"},{"location":"changelog/#use-sequence-instead-of-list-in-init_beanie","title":"Use sequence instead of list in init_beanie","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/1015</li> </ul>"},{"location":"changelog/#replace-deprecated-datetimeutcnow-with-datetimenow","title":"Replace deprecated datetime.utcnow with datetime.now","text":"<ul> <li>Author - adeelsohailahmed</li> <li>PR https://github.com/BeanieODM/beanie/pull/1014</li> </ul>"},{"location":"changelog/#fix-uniondoc-type-hint-missing-in-init_beanie-and-on-findinterface","title":"Fix uniondoc type hint missing in init_beanie and on findinterface","text":"<ul> <li>Author - CAPITAINMARVEL</li> <li>PR https://github.com/BeanieODM/beanie/pull/1007</li> </ul>"},{"location":"changelog/#add-test-to-ensure-dict-with-enum-keys-are-encoded-properly","title":"Add test to ensure dict with enum keys are encoded properly","text":"<ul> <li>Author - adeelsohailahmed</li> <li>PR https://github.com/BeanieODM/beanie/pull/1001</li> </ul>"},{"location":"changelog/#project-publishing-instruction-changelog-generation-script","title":"Project publishing instruction + changelog generation script","text":"<ul> <li>Author - roman-right</li> <li>PR https://github.com/BeanieODM/beanie/pull/998</li> </ul>"},{"location":"changelog/#revert-project-publishing-gh-action","title":"Revert project publishing gh action","text":"<ul> <li>Author - roman-right</li> <li>PR https://github.com/BeanieODM/beanie/pull/996</li> </ul>"},{"location":"changelog/#extend-motor-option-to-beanie","title":"Extend motor option to beanie","text":"<ul> <li>Author - Dudesons</li> <li>PR https://github.com/BeanieODM/beanie/pull/995</li> </ul>"},{"location":"changelog/#fix-regex-storing","title":"Fix regex storing","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/989</li> </ul>"},{"location":"changelog/#remove-links-to-ko-fi-from-the-project","title":"Remove links to ko-fi from the project","text":"<ul> <li>Author - roman-right</li> <li>PR https://github.com/BeanieODM/beanie/pull/986</li> </ul>"},{"location":"changelog/#fix-typo-in-source-code-comment-in-inheritancemd","title":"Fix typo in source code comment in inheritance.md","text":"<ul> <li>Author - fnogatz</li> <li>PR https://github.com/BeanieODM/beanie/pull/984</li> </ul>"},{"location":"changelog/#fix-gh-action-to-grant-permissions-and-use-tags","title":"Fix gh action to grant permissions and use tags","text":"<ul> <li>Author - roman-right</li> <li>PR https://github.com/BeanieODM/beanie/pull/972</li> </ul>"},{"location":"changelog/#fix-example-of-find-by-id-and-link-to-finding-documents","title":"Fix: example of find by id and link to finding-documents","text":"<ul> <li>Author - fredowashere</li> <li>PR https://github.com/BeanieODM/beanie/pull/970</li> </ul>"},{"location":"changelog/#fix-incorrect-type-serialization-when-dumping-to-python","title":"Fix incorrect type serialization when dumping to python","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/968</li> </ul>"},{"location":"changelog/#use-ruff-format-instead-of-black","title":"Use ruff format instead of black","text":"<ul> <li>Author - roman-right</li> <li>PR https://github.com/BeanieODM/beanie/pull/962</li> </ul>"},{"location":"changelog/#gh-action-set-new-version-and-publish-on-push","title":"Gh action: set new version and publish on push","text":"<ul> <li>Author - roman-right</li> <li>PR https://github.com/BeanieODM/beanie/pull/961</li> </ul>"},{"location":"changelog/#feature-fix-allow-settings-to-be-inherited-and-extended-fixes-644","title":"Feature / fix: allow settings to be inherited and extended (fixes #644)","text":"<ul> <li>Author - dotKokott</li> <li>PR https://github.com/BeanieODM/beanie/pull/960</li> </ul>"},{"location":"changelog/#fix-issue-951","title":"Fix: issue #951","text":"<ul> <li>Author - IterableTrucks</li> <li>PR https://github.com/BeanieODM/beanie/pull/952</li> </ul>"},{"location":"changelog/#allow-unordered-parameter-on-bulkwriter","title":"Allow unordered parameter on bulkwriter","text":"<ul> <li>Author - thiagosalvatore</li> <li>PR https://github.com/BeanieODM/beanie/pull/948</li> </ul>"},{"location":"changelog/#fix-set-default-value-in-findinterface_inheritance_inited-to-avoid","title":"Fix: set default value in findinterface._inheritance_inited to avoid \u2026","text":"<ul> <li>Author - Robert-Nogueira</li> <li>PR https://github.com/BeanieODM/beanie/pull/935</li> </ul>"},{"location":"changelog/#fix-example-in-multi-modelmd","title":"Fix example in multi-model.md","text":"<ul> <li>Author - gianpaj</li> <li>PR https://github.com/BeanieODM/beanie/pull/932</li> </ul>"},{"location":"changelog/#add-missing-type-signature-to-basefindcomparisonoperator-constructor","title":"Add missing type signature to <code>basefindcomparisonoperator</code> constructor","text":"<ul> <li>Author - aaronted009</li> <li>PR https://github.com/BeanieODM/beanie/pull/925</li> </ul>"},{"location":"changelog/#removed-calls-to-function-causing-deprecation-warning-where-possible","title":"Removed calls to function causing deprecation warning where possible","text":"<ul> <li>Author - 07pepa</li> <li>PR https://github.com/BeanieODM/beanie/pull/917</li> </ul>"},{"location":"changelog/#update-migrationsmd","title":"Update migrations.md","text":"<ul> <li>Author - marwan-alloreview</li> <li>PR https://github.com/BeanieODM/beanie/pull/915</li> </ul>"},{"location":"changelog/#1260-2024-05-01","title":"1.26.0 - 2024-05-01","text":""},{"location":"changelog/#feature-soft-delete","title":"Feature: soft delete","text":"<ul> <li>Author - Ali Moradi</li> <li>PR https://github.com/roman-right/beanie/pull/901</li> </ul>"},{"location":"changelog/#update-deprecated-call-of-general_plain_validator_function-676","title":"Update deprecated call of general_plain_validator_function (#676)","text":"<ul> <li>Author - dslemusp</li> <li>PR https://github.com/roman-right/beanie/pull/897</li> </ul>"},{"location":"changelog/#annotate-decorators-that-wrap-document-methods-679","title":"Annotate decorators that wrap <code>document</code> methods (#679)","text":"<ul> <li>Author - Maxim</li> <li>PR https://github.com/roman-right/beanie/pull/886</li> </ul>"},{"location":"changelog/#update-relations-docs-to-indicate-that-backlinks-are-virtual","title":"Update relations docs to indicate that backlinks are virtual.","text":"<ul> <li>Author - Josh Borrow</li> <li>PR https://github.com/roman-right/beanie/pull/904</li> </ul>"},{"location":"changelog/#docs-fix-typo-869","title":"Docs: fix typo (#869)","text":"<ul> <li>Author - Valentin Oliver Loftsson</li> <li>PR https://github.com/roman-right/beanie/pull/899</li> </ul>"},{"location":"changelog/#add-possibility-of-leveraging-enum-in-find-query","title":"Add possibility of leveraging enum in find query","text":"<ul> <li>Author - Danil</li> <li>PR https://github.com/roman-right/beanie/pull/868</li> </ul>"},{"location":"changelog/#handle-typeerror-in-validator-of-pydanticobjectid","title":"Handle typeerror in validator of pydanticobjectid","text":"<ul> <li>Author - Christian Grotheer</li> <li>PR https://github.com/roman-right/beanie/pull/861</li> </ul>"},{"location":"changelog/#1250-2024-01-24","title":"1.25.0 - 2024-01-24","text":""},{"location":"changelog/#encode-date-objects","title":"Encode Date Objects","text":"<ul> <li>Author - George Sakkis</li> <li>PR https://github.com/roman-right/beanie/pull/816</li> </ul>"},{"location":"changelog/#fix-findinterface-type-hints-break-on-view-models","title":"Fix: Findinterface Type-Hints Break On View Models","text":"<ul> <li>Author - Guy Tsitsiashvili</li> <li>PR https://github.com/roman-right/beanie/pull/819</li> </ul>"},{"location":"changelog/#fix-count-with-text-queries-and-links","title":"Fix: Count With Text Queries And Links","text":"<ul> <li>Author - Benjamin Earle</li> <li>PR https://github.com/roman-right/beanie/pull/826</li> </ul>"},{"location":"changelog/#update-migration-command-to-enabledisable-transactions","title":"Update Migration Command To Enable/Disable Transactions","text":"<ul> <li>Author - Mahmoud Mabrouk</li> <li>PR https://github.com/roman-right/beanie/pull/828</li> </ul>"},{"location":"changelog/#sync-method","title":"Sync Method","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/831</li> </ul>"},{"location":"changelog/#limit-nesting-level-of-linked-documents","title":"Limit Nesting Level Of Linked Documents","text":"<p>WARNING: This is a breaking change. Please, read the docs before updating.</p> <ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/834</li> </ul>"},{"location":"changelog/#1240-2023-12-24","title":"1.24.0 - 2023-12-24","text":""},{"location":"changelog/#exclude-revision_id-from-the-get_changes-method","title":"Exclude revision_id From The get_changes Method","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/759</li> </ul>"},{"location":"changelog/#add-support-for-custom-bucket-fields-in-time-series","title":"Add Support For Custom Bucket Fields In Time Series","text":"<ul> <li>Author - Lucas Hardt</li> <li>PR https://github.com/roman-right/beanie/pull/760</li> </ul>"},{"location":"changelog/#add-bson-maxkey-and-minkey","title":"Add Bson Maxkey And Minkey","text":"<ul> <li>Author - Noah Witt</li> <li>PR https://github.com/roman-right/beanie/pull/768</li> </ul>"},{"location":"changelog/#update-model-during-save-validation","title":"Update Model During Save Validation","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/776</li> </ul>"},{"location":"changelog/#fix-init_beanie-document_models-type-hint","title":"Fix init_beanie document_models Type Hint","text":"<ul> <li>Author - Capi Etheriel</li> <li>PR https://github.com/roman-right/beanie/pull/784</li> </ul>"},{"location":"changelog/#fix-encoding-keys-in-mapping-branch-of-encoder","title":"Fix Encoding Keys In <code>Mapping</code> Branch Of <code>Encoder</code>","text":"<ul> <li>Author - Rubikoid</li> <li>PR https://github.com/roman-right/beanie/pull/785</li> </ul>"},{"location":"changelog/#improve-write-performances","title":"Improve Write Performances","text":"<ul> <li>Author - Thibault Djaballah</li> <li>PR https://github.com/roman-right/beanie/pull/786</li> </ul>"},{"location":"changelog/#doc-update-queue","title":"Doc Update: Queue","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/794</li> </ul>"},{"location":"changelog/#tests-for-indexed-fields","title":"Tests For Indexed Fields","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/795</li> </ul>"},{"location":"changelog/#rework-revision","title":"Rework Revision","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/797</li> </ul>"},{"location":"changelog/#add-missing-type-signature-to-document-constructor","title":"Add Missing Type Signature To <code>Document</code> Constructor","text":"<ul> <li>Author - None</li> <li>PR https://github.com/roman-right/beanie/pull/813</li> </ul>"},{"location":"changelog/#1236-2023-11-12","title":"1.23.6 - 2023-11-12","text":""},{"location":"changelog/#fix-multiprocessing-mode","title":"Fix Multiprocessing Mode","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/782</li> </ul>"},{"location":"changelog/#1235-2023-11-12","title":"1.23.5 - 2023-11-12","text":""},{"location":"changelog/#multiprocessing-mode-for-init","title":"Multiprocessing Mode For Init","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/781</li> </ul>"},{"location":"changelog/#1234-2023-11-12","title":"1.23.4 - 2023-11-12","text":""},{"location":"changelog/#args-for-get_model_dump","title":"Args For <code>get_model_dump</code>","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/780</li> </ul>"},{"location":"changelog/#1233-2023-11-08","title":"1.23.3 - 2023-11-08","text":""},{"location":"changelog/#fix-id-notation","title":"Fix Id Notation","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/772</li> </ul>"},{"location":"changelog/#1232-2023-11-08","title":"1.23.2 - 2023-11-08","text":""},{"location":"changelog/#fix-aggregations-with-text-queries","title":"Fix Aggregations With Text Queries","text":"<ul> <li>Author - Benjamin Earle</li> <li>PR https://github.com/roman-right/beanie/pull/752</li> </ul>"},{"location":"changelog/#handle-annotated-indexes","title":"Handle Annotated Indexes","text":"<ul> <li>Author - Benjamin Earle</li> <li>PR https://github.com/roman-right/beanie/pull/762</li> </ul>"},{"location":"changelog/#fix-docstring","title":"Fix Docstring","text":"<ul> <li>Author - Andrew Grinevich</li> <li>PR https://github.com/roman-right/beanie/pull/766</li> </ul>"},{"location":"changelog/#build-aggregation-pipeline-from-find-query-without-fetch","title":"Build Aggregation Pipeline From Find Query Without Fetch","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/770</li> </ul>"},{"location":"changelog/#1231-2023-10-23","title":"1.23.1 - 2023-10-23","text":""},{"location":"changelog/#fix-issue-631","title":"Fix: Issue #631","text":"<ul> <li>Author - IterableTrucks</li> <li>PR https://github.com/roman-right/beanie/pull/734</li> </ul>"},{"location":"changelog/#replace-custom-hiddentrue-field-attribute-with-builtin-excludetrue","title":"Replace Custom 'Hidden=True' Field Attribute With Builtin 'Exclude=True'","text":"<ul> <li>Author - George Sakkis</li> <li>PR https://github.com/roman-right/beanie/pull/741</li> </ul>"},{"location":"changelog/#add-support-for-indexed-custom-pydantic-fields","title":"Add Support For Indexed Custom Pydantic Fields","text":"<ul> <li>Author - Adam Asay</li> <li>PR https://github.com/roman-right/beanie/pull/754</li> </ul>"},{"location":"changelog/#1230-2023-10-15","title":"1.23.0 - 2023-10-15","text":""},{"location":"changelog/#refactor-encoder","title":"Refactor Encoder","text":"<ul> <li>Author - George Sakkis</li> <li>PR https://github.com/roman-right/beanie/pull/584</li> </ul>"},{"location":"changelog/#preserve-sortskiplimit-for-aggregations","title":"Preserve Sort/Skip/Limit For Aggregations","text":"<ul> <li>Author - George Sakkis</li> <li>PR https://github.com/roman-right/beanie/pull/711</li> </ul>"},{"location":"changelog/#update-pre-commit-hooks","title":"Update Pre-Commit Hooks","text":"<ul> <li>Author - SADIK KUZU</li> <li>PR https://github.com/roman-right/beanie/pull/712</li> </ul>"},{"location":"changelog/#fixed-link-validation","title":"Fixed Link Validation","text":"<ul> <li>Author - Evgeniy Goncharuck</li> <li>PR https://github.com/roman-right/beanie/pull/714</li> </ul>"},{"location":"changelog/#fix-pydantic_core_pydantic_coreurl-object-is-not-iterable","title":"Fix: pydantic_core._pydantic_core.Url object is not iterable","text":"<ul> <li>Author - Tomohiro Hiratsuka</li> <li>PR https://github.com/roman-right/beanie/pull/730</li> </ul>"},{"location":"changelog/#simplify-and-fix-decimalannotation","title":"Simplify And Fix DecimalAnnotation","text":"<ul> <li>Author - George Sakkis</li> <li> <p>PR https://github.com/roman-right/beanie/pull/738</p> </li> <li> <p>Issues:</p> <ul> <li>[BUG] Validation Error on parsing retrieved document's BSON Decimal128 field</li> </ul> </li> </ul>"},{"location":"changelog/#simplify-bsonbinary","title":"Simplify BsonBinary","text":"<ul> <li>Author - George Sakkis</li> <li>PR https://github.com/roman-right/beanie/pull/739</li> </ul>"},{"location":"changelog/#minor-fixes","title":"Minor Fixes","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/745</li> </ul>"},{"location":"changelog/#replace-encoder-with-get_dict-in-the-replace_one-method","title":"Replace Encoder With get_dict In The replace_one Method","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/747</li> </ul>"},{"location":"changelog/#1226-2023-09-16","title":"1.22.6 - 2023-09-16","text":""},{"location":"changelog/#update-precommit-hooks-ci","title":"Update Precommit Hooks &amp; CI","text":"<ul> <li>Author - George Sakkis</li> <li>PR https://github.com/roman-right/beanie/pull/673</li> </ul>"},{"location":"changelog/#1225-2023-09-13","title":"1.22.5 - 2023-09-13","text":""},{"location":"changelog/#fix-unify-methods-for-retrieving-fields-extra-parameters-during-backlink-processing","title":"Fix: Unify Methods for Retrieving Field's Extra Parameters During Backlink Processing","text":"<ul> <li>Author - Roman Right</li> <li> <p>PR https://github.com/roman-right/beanie/pull/703</p> </li> <li> <p>Issues: </p> <ul> <li>[BUG] Optional[Backlink]</li> </ul> </li> </ul>"},{"location":"changelog/#1224-2023-09-13","title":"1.22.4 - 2023-09-13","text":""},{"location":"changelog/#fix-numpy-array-incompatability","title":"Fix Numpy Array Incompatability","text":"<ul> <li>Author - Alex Lau</li> <li>PR https://github.com/roman-right/beanie/pull/658</li> </ul>"},{"location":"changelog/#1223-2023-09-13","title":"1.22.3 - 2023-09-13","text":""},{"location":"changelog/#refactor-simplify-updatemany-and-updateone-await-method","title":"Refactor: Simplify UpdateMany And UpdateOne await Method","text":"<ul> <li>Author - Muzaffer Cikay</li> <li>PR https://github.com/roman-right/beanie/pull/687</li> </ul>"},{"location":"changelog/#1222-2023-09-13","title":"1.22.2 - 2023-09-13","text":""},{"location":"changelog/#fix-get_field_type-generalize-extract_id_class","title":"Fix get_field_type &amp; Generalize extract_id_class","text":"<ul> <li>Author - George Sakkis</li> <li>PR https://github.com/roman-right/beanie/pull/657</li> </ul>"},{"location":"changelog/#1221-2023-09-13","title":"1.22.1 - 2023-09-13","text":""},{"location":"changelog/#fix-list_collection_names-requires-unnecessary-privileges","title":"Fix | list_collection_names Requires Unnecessary Privileges","text":"<ul> <li>Author - Marina</li> <li>PR https://github.com/roman-right/beanie/pull/681</li> <li>Issues:</li> <li>[BUG] Can't use a View if the user doesn't have full read privileges to all collections</li> </ul>"},{"location":"changelog/#1220-2023-09-13","title":"1.22.0 - 2023-09-13","text":""},{"location":"changelog/#fix-august-2023","title":"Fix | August 2023","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/669</li> <li> <p>Issues:</p> </li> <li> <p>[BUG] Issue with <code>List[Link[Type]]</code> when <code>fetch_all_links</code> is called </p> </li> <li>Loosen type requirement for <code>insert_many()</code>? </li> <li>[BUG] Updating documents with a frozen BaseModel as field raises TypeError </li> <li>[BUG] Not operator cant be on top level</li> <li>[BUG] <code>Text</code> query doesn't work with <code>fetch_links=True</code></li> <li>[BUG] List type fields in updated model record do not get update.</li> <li>[BUG] Undefined behavior when chaining update methods</li> <li>[BUG] Revision Id is in Responsemodel</li> <li>[BUG] Custom types like bson.Binary require <code>__get_pydantic_core_schema__</code></li> <li>[BUG] <code>validate_on_save</code> doesn't work with <code>Document.save()</code></li> <li>[BUG] Beanie persists <code>root</code> field</li> <li>Beanie 1.21 still triggers many deprecation warnings with Pydantic v2</li> <li>[BUG] TypeError: expected 1 argument, got 0 when beanie.Document has method wrapped in pydantic.validate_call</li> </ul>"},{"location":"changelog/#1210-2023-08-03","title":"1.21.0 - 2023-08-03","text":""},{"location":"changelog/#pydantic-bump-final","title":"Pydantic bump | final","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/636</li> </ul>"},{"location":"changelog/#1210b1-2023-07-21","title":"1.21.0b1 - 2023-07-21","text":""},{"location":"changelog/#bump-pydantic-beta-1","title":"Bump pydantic | beta 1","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/624</li> </ul>"},{"location":"changelog/#1210b0-2023-07-19","title":"1.21.0b0 - 2023-07-19","text":""},{"location":"changelog/#bump-pydantic-beta-0","title":"Bump pydantic | beta 0","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/620</li> </ul>"},{"location":"changelog/#1200-2023-06-30","title":"1.20.0 - 2023-06-30","text":""},{"location":"changelog/#docs-queue-battery","title":"Docs: queue battery","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/603</li> </ul>"},{"location":"changelog/#1200b1-2023-06-09","title":"1.20.0b1 - 2023-06-09","text":""},{"location":"changelog/#feature-custom-init-classmethod","title":"Feature: custom init classmethod","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/590</li> </ul>"},{"location":"changelog/#1200b0-2023-06-09","title":"1.20.0b0 - 2023-06-09","text":""},{"location":"changelog/#feature-optional-batteries","title":"Feature: optional batteries","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/575</li> </ul>"},{"location":"changelog/#1192-2023-05-25","title":"1.19.2 - 2023-05-25","text":""},{"location":"changelog/#fix-issues-opened-before-202305","title":"Fix: issues opened before 2023.05","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/571</li> </ul>"},{"location":"changelog/#1191-2023-05-22","title":"1.19.1 - 2023-05-22","text":""},{"location":"changelog/#fix-update-forward-refs-during-nested-links-check","title":"Fix: update forward refs during nested links check","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/566</li> </ul>"},{"location":"changelog/#fix-session-in-iterative-transactions","title":"Fix: session in iterative transactions","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/567</li> </ul>"},{"location":"changelog/#1190-2023-05-05","title":"1.19.0 - 2023-05-05","text":""},{"location":"changelog/#featback-refs","title":"Feat/back refs","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/557</li> </ul>"},{"location":"changelog/#feat-add-box-operator","title":"Feat: add box operator","text":"<ul> <li>Author - Anton Kriese</li> <li>PR https://github.com/roman-right/beanie/pull/552</li> </ul>"},{"location":"changelog/#fix-table-of-contents-not-showing-all-classes","title":"Fix table of contents not showing all classes","text":"<ul> <li>Author - Kai Schniedergers</li> <li>PR https://github.com/roman-right/beanie/pull/546</li> </ul>"},{"location":"changelog/#return-bulkwriteresult-response-from-motor","title":"Return bulkwriteresult response from motor","text":"<ul> <li>Author - divyam234</li> <li>PR https://github.com/roman-right/beanie/pull/542</li> </ul>"},{"location":"changelog/#fix-typing-in-documentget","title":"Fix typing in 'document.get(...)'","text":"<ul> <li>Author - Yallxe</li> <li>PR https://github.com/roman-right/beanie/pull/526</li> </ul>"},{"location":"changelog/#init-views-cache","title":"Init view's cache","text":"<ul> <li>Author - Antonio Eugenio Burriel</li> <li>PR https://github.com/roman-right/beanie/pull/521</li> </ul>"},{"location":"changelog/#kwargs-arguments-for-elemmatch-operator","title":"Kwargs arguments for elemmatch operator","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/517</li> </ul>"},{"location":"changelog/#1181-2023-05-04","title":"1.18.1 - 2023-05-04","text":""},{"location":"changelog/#keep-nulls-config","title":"Keep nulls config","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/555</li> </ul>"},{"location":"changelog/#1180-2023-03-31","title":"1.18.0 - 2023-03-31","text":""},{"location":"changelog/#prevent-the-models-returned-from-find_all-to-be-modified-in-the-middle-of-modifying","title":"Prevent the models returned from find_all to be modified in the middle of modifying","text":"<ul> <li>Author - Harris Tsim</li> <li>PR https://github.com/roman-right/beanie/pull/502</li> </ul>"},{"location":"changelog/#allow-change-class_id-and-use-name-settings-in-uniondoc","title":"Allow change class_id and use name settings in uniondoc","text":"<ul> <li>Author - \uc124\uc6d0\uc900(Wonjoon Seol)/Dispatch squad</li> <li>PR https://github.com/roman-right/beanie/pull/466</li> </ul>"},{"location":"changelog/#fix-make-revision_id-not-show-in-schema","title":"Fix: make <code>revision_id</code> not show in schema","text":"<ul> <li>Author - Ivan GJ</li> <li>PR https://github.com/roman-right/beanie/pull/478</li> </ul>"},{"location":"changelog/#fix-added-repattern-support-to-common-encoder-suite","title":"Fix: added re.pattern support to common encoder suite","text":"<ul> <li>Author - Ilia</li> <li>PR https://github.com/roman-right/beanie/pull/511</li> </ul>"},{"location":"changelog/#fix-other-issues","title":"Fix other issues","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/518</li> </ul>"},{"location":"changelog/#1180b1-2023-02-09","title":"1.18.0b1 - 2023-02-09","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>Don't create state on init for docs with custom id types</li> </ul>"},{"location":"changelog/#implementation","title":"Implementation","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/486</li> </ul>"},{"location":"changelog/#1180b0-2023-01-30","title":"1.18.0b0 - 2023-01-30","text":""},{"location":"changelog/#feature","title":"Feature","text":"<ul> <li>feat: convert updates to be atomic operations</li> </ul>"},{"location":"changelog/#implementation_1","title":"Implementation","text":"<ul> <li>Author - Roman Right</li> <li>PR https://github.com/roman-right/beanie/pull/481</li> </ul>"},{"location":"changelog/#1170-2023-01-19","title":"1.17.0 - 2023-01-19","text":""},{"location":"changelog/#feature_1","title":"Feature","text":"<ul> <li>Add links to views</li> </ul>"},{"location":"changelog/#implementation_2","title":"Implementation","text":"<ul> <li>Author - Sebastian Battle</li> <li>PR https://github.com/roman-right/beanie/pull/472</li> </ul>"},{"location":"changelog/#1168-2022-01-05","title":"1.16.8 - 2022-01-05","text":""},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>Already inserted Links will throw DuplicateKeyError on insert of wrapping doc</li> </ul>"},{"location":"changelog/#implementation_3","title":"Implementation","text":"<ul> <li>Author - noaHson86</li> <li>PR https://github.com/roman-right/beanie/pull/469</li> </ul>"},{"location":"changelog/#1167-2023-01-03","title":"1.16.7 - 2023-01-03","text":""},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>sort many args</li> </ul>"},{"location":"changelog/#implementation_4","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/468</li> </ul>"},{"location":"changelog/#1166-2022-12-27","title":"1.16.6 - 2022-12-27","text":""},{"location":"changelog/#feature_2","title":"Feature","text":"<ul> <li>Previous saved state</li> </ul>"},{"location":"changelog/#implementation_5","title":"Implementation","text":"<ul> <li>Author - Paul Renvois\u00e9</li> <li>PR https://github.com/roman-right/beanie/pull/305</li> </ul>"},{"location":"changelog/#1165-2022-12-27","title":"1.16.5 - 2022-12-27","text":""},{"location":"changelog/#deprecation","title":"Deprecation","text":"<ul> <li>Raises exception if <code>Collection</code> inner class was used as it is not supported more</li> </ul>"},{"location":"changelog/#backported-to","title":"Backported to","text":"<ul> <li>1.15.5</li> <li>1.14.1</li> </ul>"},{"location":"changelog/#implementation_6","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/460</li> </ul>"},{"location":"changelog/#1164-2022-12-20","title":"1.16.4 - 2022-12-20","text":""},{"location":"changelog/#fix_3","title":"Fix","text":"<ul> <li>[BUG] Initiating self-referencing documents with nested links breaks due to uncaught request loop</li> <li>Nested lookups for direct links</li> </ul>"},{"location":"changelog/#implementation_7","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/455</li> </ul>"},{"location":"changelog/#1163-2022-12-19","title":"1.16.3 - 2022-12-19","text":""},{"location":"changelog/#fix_4","title":"Fix","text":"<ul> <li>[BUG] revision_id field saved in MongoDB using save()/replace() on an existing document even if use_revision is False</li> </ul>"},{"location":"changelog/#implementation_8","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/452</li> </ul>"},{"location":"changelog/#1162-2022-12-19","title":"1.16.2 - 2022-12-19","text":""},{"location":"changelog/#fix_5","title":"Fix","text":"<ul> <li>[BUG] find_one projection link</li> <li>[BUG]: Link fields interference/contamination</li> <li>[BUG]: ElemMatch on Document property of Type List[Link] fails with IndexError in relations.py convert_ids()</li> </ul>"},{"location":"changelog/#implementation_9","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/448</li> </ul>"},{"location":"changelog/#1161-2022-12-17","title":"1.16.1 - 2022-12-17","text":""},{"location":"changelog/#feature_3","title":"Feature","text":"<ul> <li>Remove yarl dependency</li> </ul>"},{"location":"changelog/#implementation_10","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/448</li> </ul>"},{"location":"changelog/#1160-2022-12-17","title":"1.16.0 - 2022-12-17","text":""},{"location":"changelog/#feature_4","title":"Feature","text":"<ul> <li>Support for fetching deep-nested Links</li> </ul>"},{"location":"changelog/#implementation_11","title":"Implementation","text":"<ul> <li>Author - Courtney Sanders</li> <li>PR https://github.com/roman-right/beanie/pull/419</li> </ul>"},{"location":"changelog/#1160b3-2022-11-28","title":"1.16.0b3 - 2022-11-28","text":""},{"location":"changelog/#feature_5","title":"Feature","text":"<ul> <li>Lazy parsing for find many</li> </ul>"},{"location":"changelog/#implementation_12","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/436</li> </ul>"},{"location":"changelog/#1154-2022-11-18","title":"1.15.4 - 2022-11-18","text":""},{"location":"changelog/#fix_6","title":"Fix","text":"<ul> <li>Wrong inheritance behavior with non-rooted documents</li> </ul>"},{"location":"changelog/#implementation_13","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/422</li> </ul>"},{"location":"changelog/#1153-2022-11-10","title":"1.15.3 - 2022-11-10","text":""},{"location":"changelog/#fix_7","title":"Fix","text":"<ul> <li>Deepcopy dict before encode it to save the original</li> </ul>"},{"location":"changelog/#implementation_14","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/412</li> </ul>"},{"location":"changelog/#1152-2022-11-09","title":"1.15.2 - 2022-11-09","text":""},{"location":"changelog/#fix_8","title":"Fix","text":"<ul> <li>Use Settings inner class in migrations internals</li> <li>Fix inheritance: mark root docs with <code>_inheritance_inited = True</code></li> </ul>"},{"location":"changelog/#implementation_15","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/409</li> </ul>"},{"location":"changelog/#1151-2022-11-07","title":"1.15.1 - 2022-11-07","text":""},{"location":"changelog/#fix_9","title":"Fix","text":"<ul> <li>Pass pymongo kwargs to the bulk writer</li> </ul>"},{"location":"changelog/#implementation_16","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/406</li> </ul>"},{"location":"changelog/#1150-2022-11-05","title":"1.15.0 - 2022-11-05","text":""},{"location":"changelog/#feature_6","title":"Feature","text":"<ul> <li>The sync version was moved to a separate project</li> </ul>"},{"location":"changelog/#breaking-change","title":"Breaking change","text":"<ul> <li>There is no sync version here more. Please use Bunnet instead</li> </ul>"},{"location":"changelog/#implementation_17","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/395</li> </ul>"},{"location":"changelog/#1140-2022-11-04","title":"1.14.0 - 2022-11-04","text":""},{"location":"changelog/#feature_7","title":"Feature","text":"<ul> <li>Multi-model behavior for inherited documents</li> </ul>"},{"location":"changelog/#breaking-change_1","title":"Breaking change","text":"<ul> <li>The inner class <code>Collection</code> is not supported more. Please, use <code>Settings</code> instead.</li> </ul>"},{"location":"changelog/#implementation_18","title":"Implementation","text":"<ul> <li>Author - Vitaliy Ivanov</li> <li>PR https://github.com/roman-right/beanie/pull/395</li> </ul>"},{"location":"changelog/#1131-2022-10-26","title":"1.13.1 - 2022-10-26","text":""},{"location":"changelog/#fix_10","title":"Fix","text":"<ul> <li>Remove redundant async things from sync interface</li> </ul>"},{"location":"changelog/#implementation_19","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/390</li> </ul>"},{"location":"changelog/#1130-2022-10-22","title":"1.13.0 - 2022-10-22","text":""},{"location":"changelog/#improvement","title":"Improvement","text":"<ul> <li>Sync interface</li> </ul>"},{"location":"changelog/#implementation_20","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/386</li> </ul>"},{"location":"changelog/#1121-2022-10-17","title":"1.12.1 - 2022-10-17","text":""},{"location":"changelog/#improvement_1","title":"Improvement","text":"<ul> <li>Clone interface for query objects</li> </ul>"},{"location":"changelog/#implementation_21","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/378</li> </ul>"},{"location":"changelog/#1120-2022-10-06","title":"1.12.0 - 2022-10-06","text":""},{"location":"changelog/#improvement_2","title":"Improvement","text":"<ul> <li>Optional list of links field</li> </ul>"},{"location":"changelog/#implementation_22","title":"Implementation","text":"<ul> <li>Author - Alex Deng</li> <li>PR https://github.com/roman-right/beanie/pull/358</li> </ul>"},{"location":"changelog/#11112-2022-09-28","title":"1.11.12 - 2022-09-28","text":""},{"location":"changelog/#improvement_3","title":"Improvement","text":"<ul> <li>Change before_event, after_event signature to be more pythonic</li> </ul>"},{"location":"changelog/#implementation_23","title":"Implementation","text":"<ul> <li>DISCUSSION https://github.com/roman-right/beanie/discussions/354</li> </ul>"},{"location":"changelog/#11111-2022-09-26","title":"1.11.11 - 2022-09-26","text":""},{"location":"changelog/#fix_11","title":"Fix","text":"<ul> <li>Remove prints</li> </ul>"},{"location":"changelog/#implementation_24","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/355/</li> </ul>"},{"location":"changelog/#11110-2022-09-20","title":"1.11.10 - 2022-09-20","text":""},{"location":"changelog/#improvement_4","title":"Improvement","text":"<ul> <li>Adding Update Action</li> </ul>"},{"location":"changelog/#implementation_25","title":"Implementation","text":"<ul> <li>Author - schwannden</li> <li>PR https://github.com/roman-right/beanie/pull/291/</li> </ul>"},{"location":"changelog/#1119-2022-08-19","title":"1.11.9 - 2022-08-19","text":""},{"location":"changelog/#fix_12","title":"Fix","text":"<ul> <li>Move set state and swap revision to init to avoid problems with subdocs</li> <li>Issue https://github.com/roman-right/beanie/issues/294</li> <li>Issue https://github.com/roman-right/beanie/issues/310</li> </ul>"},{"location":"changelog/#1118-2022-08-17","title":"1.11.8 - 2022-08-17","text":""},{"location":"changelog/#improvement_5","title":"Improvement","text":"<ul> <li>Skip sync parameter for instance updates</li> </ul>"},{"location":"changelog/#1117-2022-08-02","title":"1.11.7 - 2022-08-02","text":""},{"location":"changelog/#improvement_6","title":"Improvement","text":"<ul> <li>Decimal128 encoding</li> </ul>"},{"location":"changelog/#implementation_26","title":"Implementation","text":"<ul> <li>Author - Teslim Olunlade</li> <li>PR https://github.com/roman-right/beanie/pull/321</li> </ul>"},{"location":"changelog/#1116-2022-06-24","title":"1.11.6 - 2022-06-24","text":""},{"location":"changelog/#fix_13","title":"Fix","text":"<ul> <li>Roll back projections fix, as it was valid</li> </ul>"},{"location":"changelog/#1115-2022-06-24","title":"1.11.5 - 2022-06-24","text":""},{"location":"changelog/#fix_14","title":"Fix","text":"<ul> <li>Projection fix for aggregations</li> </ul>"},{"location":"changelog/#1114-2022-06-13","title":"1.11.4 - 2022-06-13","text":""},{"location":"changelog/#improvement_7","title":"Improvement","text":"<ul> <li>Link as FastAPI output</li> </ul>"},{"location":"changelog/#1113-2022-06-10","title":"1.11.3 - 2022-06-10","text":""},{"location":"changelog/#improvement_8","title":"Improvement","text":"<ul> <li>Motor3 support</li> </ul>"},{"location":"changelog/#implementation_27","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/262</li> </ul>"},{"location":"changelog/#1112-2022-06-06","title":"1.11.2 - 2022-06-06","text":""},{"location":"changelog/#fix_15","title":"Fix","text":"<ul> <li>Dnt inherit excludes</li> </ul>"},{"location":"changelog/#implementation_28","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/279</li> </ul>"},{"location":"changelog/#1111-2022-05-31","title":"1.11.1 - 2022-05-31","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Allow extra</li> <li>Distinct</li> </ul>"},{"location":"changelog/#implementation_29","title":"Implementation","text":"<ul> <li>Author - Robert Rosca</li> <li>PR https://github.com/roman-right/beanie/pull/263</li> <li>Author - \u041d\u0438\u043a\u0438\u0442\u0430</li> <li>PR https://github.com/roman-right/beanie/pull/268</li> </ul>"},{"location":"changelog/#1110-2022-05-06","title":"1.11.0 - 2022-05-06","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Multi-model mode</li> <li>Views</li> </ul>"},{"location":"changelog/#1109-2022-05-06","title":"1.10.9 - 2022-05-06","text":""},{"location":"changelog/#improvement_9","title":"Improvement","text":"<ul> <li>pymongo_kwargs for insert many</li> </ul>"},{"location":"changelog/#1108-2022-04-13","title":"1.10.8 - 2022-04-13","text":""},{"location":"changelog/#fix_16","title":"Fix","text":"<ul> <li>Match step after limit step</li> </ul>"},{"location":"changelog/#implementation_30","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/241</li> </ul>"},{"location":"changelog/#1107-2022-04-12","title":"1.10.7 - 2022-04-12","text":""},{"location":"changelog/#fix_17","title":"Fix","text":"<ul> <li>Empty update fails on revision id turned on</li> </ul>"},{"location":"changelog/#implementation_31","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/239</li> </ul>"},{"location":"changelog/#1106-2022-04-12","title":"1.10.6 - 2022-04-12","text":""},{"location":"changelog/#improvement_10","title":"Improvement","text":"<ul> <li>Single syntax for find by id</li> </ul>"},{"location":"changelog/#implementation_32","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/238</li> </ul>"},{"location":"changelog/#1105-2022-04-11","title":"1.10.5 - 2022-04-11","text":""},{"location":"changelog/#improvement_11","title":"Improvement","text":"<ul> <li>Avoid creating redundant query object</li> </ul>"},{"location":"changelog/#implementation_33","title":"Implementation","text":"<ul> <li>Author - amos402</li> <li>PR https://github.com/roman-right/beanie/pull/235</li> </ul>"},{"location":"changelog/#1104-2022-03-24","title":"1.10.4 - 2022-03-24","text":""},{"location":"changelog/#improvement_12","title":"Improvement","text":"<ul> <li>Allow custom MigrationNode for build</li> </ul>"},{"location":"changelog/#implementation_34","title":"Implementation","text":"<ul> <li>Author - amos402</li> <li>PR https://github.com/roman-right/beanie/pull/234</li> </ul>"},{"location":"changelog/#1103-2022-02-29","title":"1.10.3 - 2022-02-29","text":""},{"location":"changelog/#improvement_13","title":"Improvement","text":"<ul> <li>Delete action</li> </ul>"},{"location":"changelog/#implementation_35","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/225</li> </ul>"},{"location":"changelog/#1102-2022-02-28","title":"1.10.2 - 2022-02-28","text":""},{"location":"changelog/#improvement_14","title":"Improvement","text":"<ul> <li>Bulk writer for upsert</li> </ul>"},{"location":"changelog/#implementation_36","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/224</li> </ul>"},{"location":"changelog/#1101-2022-02-24","title":"1.10.1 - 2022-02-24","text":""},{"location":"changelog/#improvement_15","title":"Improvement","text":"<ul> <li>Skip actions</li> </ul>"},{"location":"changelog/#implementation_37","title":"Implementation","text":"<ul> <li>Author - Paul Renvois\u00e9</li> <li>PR https://github.com/roman-right/beanie/pull/218</li> </ul>"},{"location":"changelog/#1100-2022-02-24","title":"1.10.0 - 2022-02-24","text":""},{"location":"changelog/#improvement_16","title":"Improvement","text":"<ul> <li>Timeseries collections support</li> <li>Pymongo kwargs for find, aggregate, update and delete operations</li> </ul>"},{"location":"changelog/#implementation_38","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/214</li> </ul>"},{"location":"changelog/#192-2022-02-22","title":"1.9.2 - 2022-02-22","text":""},{"location":"changelog/#improvement_17","title":"Improvement","text":"<ul> <li>First or None for find queries</li> </ul>"},{"location":"changelog/#implementation_39","title":"Implementation","text":"<ul> <li>ISSUE - https://github.com/roman-right/beanie/issues/207</li> </ul>"},{"location":"changelog/#191-2022-02-11","title":"1.9.1 - 2022-02-11","text":""},{"location":"changelog/#improvement_18","title":"Improvement","text":"<ul> <li>Add support for py.typed file</li> </ul>"},{"location":"changelog/#implementation_40","title":"Implementation","text":"<ul> <li>Author - Nicholas Smith</li> <li>PR - https://github.com/roman-right/beanie/pull/201</li> </ul>"},{"location":"changelog/#190-2022-02-11","title":"1.9.0 - 2022-02-11","text":""},{"location":"changelog/#breaking-change_2","title":"Breaking Change","text":"<ul> <li>Property allow_index_dropping to be default False. Indexes will not be deleted by default</li> </ul>"},{"location":"changelog/#implementation_41","title":"Implementation","text":"<ul> <li>Author - Nicholas Smith</li> <li>PR - https://github.com/roman-right/beanie/pull/196</li> </ul>"},{"location":"changelog/#1813-2022-02-10","title":"1.8.13 - 2022-02-10","text":""},{"location":"changelog/#improvement_19","title":"Improvement","text":"<ul> <li>Add state_management_replace_objects setting</li> </ul>"},{"location":"changelog/#implementation_42","title":"Implementation","text":"<ul> <li>Author - Paul Renvois\u00e9</li> <li>PR - https://github.com/roman-right/beanie/pull/197</li> </ul>"},{"location":"changelog/#1812-2022-01-06","title":"1.8.12 - 2022-01-06","text":""},{"location":"changelog/#improvement_20","title":"Improvement","text":"<ul> <li>Add exclude_hidden to dict() to be able to keep hidden fields hidden when the exclude parameter set</li> </ul>"},{"location":"changelog/#implementation_43","title":"Implementation","text":"<ul> <li>Author - Yallxe</li> <li>PR - https://github.com/roman-right/beanie/pull/178</li> </ul>"},{"location":"changelog/#1811-2021-12-30","title":"1.8.11 - 2021-12-30","text":""},{"location":"changelog/#improvement_21","title":"Improvement","text":"<ul> <li>Only safe pydantic version are allowed. https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh</li> </ul>"},{"location":"changelog/#1810-2021-12-29","title":"1.8.10 - 2021-12-29","text":""},{"location":"changelog/#fix_18","title":"Fix","text":"<ul> <li>Revision didn't swap previous revision id and the current one on getting objects from db</li> </ul>"},{"location":"changelog/#189-2021-12-23","title":"1.8.9 - 2021-12-23","text":""},{"location":"changelog/#improvement_22","title":"Improvement","text":"<ul> <li>Deep search of updates for the <code>save_changes()</code> method</li> </ul>"},{"location":"changelog/#kudos","title":"Kudos","text":"<ul> <li>Thanks, Tigran Khazhakyan for the deep search algo here</li> </ul>"},{"location":"changelog/#188-2021-12-17","title":"1.8.8 - 2021-12-17","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Search by linked documents fields (for pre-fetching search only)</li> </ul>"},{"location":"changelog/#187-2021-12-12","title":"1.8.7 - 2021-12-12","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Binary encoder issue</li> </ul>"},{"location":"changelog/#186-2021-12-14","title":"1.8.6 - 2021-12-14","text":""},{"location":"changelog/#improved","title":"Improved","text":"<ul> <li>Encoder</li> </ul>"},{"location":"changelog/#185-2021-12-09","title":"1.8.5 - 2021-12-09","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li><code>Optional[Link[Sample]]</code> is allowed field type syntax now</li> </ul>"},{"location":"changelog/#184-2021-12-12","title":"1.8.4 - 2021-12-12","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>DateTime bson type</li> </ul>"},{"location":"changelog/#183-2021-12-07","title":"1.8.3 - 2021-12-07","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Subclasses inherit event-based actions</li> </ul>"},{"location":"changelog/#182-2021-12-04","title":"1.8.2 - 2021-12-04","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Encoder priority</li> </ul>"},{"location":"changelog/#181-2021-11-30","title":"1.8.1 - 2021-11-30","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Key-based call of subfields in the query builders</li> </ul>"},{"location":"changelog/#180-2021-11-30","title":"1.8.0 - 2021-11-30","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Relations</li> </ul>"},{"location":"changelog/#implementation_44","title":"Implementation","text":"<ul> <li>PR https://github.com/roman-right/beanie/pull/149</li> </ul>"},{"location":"changelog/#172-2021-11-03","title":"1.7.2 - 2021-11-03","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li><code>revision_id</code> is hidden in the api schema</li> </ul>"},{"location":"changelog/#implementation_45","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/136</li> </ul>"},{"location":"changelog/#171-2021-11-02","title":"1.7.1 - 2021-11-02","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li><code>revision_id</code> is hidden in the outputs</li> </ul>"},{"location":"changelog/#implementation_46","title":"Implementation","text":"<ul> <li>ISSUE https://github.com/roman-right/beanie/issues/136</li> </ul>"},{"location":"changelog/#170-2021-10-12","title":"1.7.0 - 2021-10-12","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Cache</li> <li>Bulk write</li> <li><code>exists</code> - find query's method</li> </ul>"},{"location":"changelog/#implementation_47","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/123</li> <li>PR - https://github.com/roman-right/beanie/pull/122</li> <li>PR - https://github.com/roman-right/beanie/pull/129</li> </ul>"},{"location":"changelog/#161-2021-10-06","title":"1.6.1 - 2021-10-06","text":""},{"location":"changelog/#update","title":"Update","text":"<ul> <li>Customization support. It is possible to change query builder classes,  used in the classes, which are inherited from the Document class</li> </ul>"},{"location":"changelog/#implementation_48","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/125</li> </ul>"},{"location":"changelog/#160-2021-09-30","title":"1.6.0 - 2021-09-30","text":""},{"location":"changelog/#update_1","title":"Update","text":"<ul> <li>Validate on save</li> </ul>"},{"location":"changelog/#implementation_49","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/118</li> </ul>"},{"location":"changelog/#151-2021-09-27","title":"1.5.1 - 2021-09-27","text":""},{"location":"changelog/#update_2","title":"Update","text":"<ul> <li>Simplification for init_beanie function</li> </ul>"},{"location":"changelog/#implementation_50","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/104</li> </ul>"},{"location":"changelog/#150-2021-09-27","title":"1.5.0 - 2021-09-27","text":""},{"location":"changelog/#update_3","title":"Update","text":"<ul> <li>Custom encoders to be able to configure,  how specific type should be presented in the database</li> </ul>"},{"location":"changelog/#implementation_51","title":"Implementation","text":"<ul> <li>Author - Nazar Vovk</li> <li>PR - https://github.com/roman-right/beanie/pull/91</li> </ul>"},{"location":"changelog/#140-2021-09-13","title":"1.4.0 - 2021-09-13","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Document state management</li> </ul>"},{"location":"changelog/#implementation_52","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/114</li> </ul>"},{"location":"changelog/#130-2021-09-08","title":"1.3.0 - 2021-09-08","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Active record pattern</li> </ul>"},{"location":"changelog/#implementation_53","title":"Implementation","text":"<ul> <li>Issue - https://github.com/roman-right/beanie/issues/110</li> </ul>"},{"location":"changelog/#128-2021-09-01","title":"1.2.8 - 2021-09-01","text":""},{"location":"changelog/#fix_19","title":"Fix","text":"<ul> <li>Delete's return annotation</li> </ul>"},{"location":"changelog/#implementation_54","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/109</li> </ul>"},{"location":"changelog/#127-2021-09-01","title":"1.2.7 - 2021-09-01","text":""},{"location":"changelog/#update_4","title":"Update","text":"<ul> <li>Annotations for update and delete</li> </ul>"},{"location":"changelog/#implementation_55","title":"Implementation","text":"<ul> <li>Author - Anthony Shaw</li> <li>PR - https://github.com/roman-right/beanie/pull/106</li> </ul>"},{"location":"changelog/#126-2021-08-25","title":"1.2.6 - 2021-08-25","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>MongoDB 5.0 in GH actions</li> </ul>"},{"location":"changelog/#implementation_56","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/100</li> </ul>"},{"location":"changelog/#125-2021-07-21","title":"1.2.5 - 2021-07-21","text":""},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Indexed fields work with aliases now</li> </ul>"},{"location":"changelog/#implementation_57","title":"Implementation","text":"<ul> <li>Author - Kira</li> <li>Issue - https://github.com/roman-right/beanie/issues/96</li> </ul>"},{"location":"changelog/#124-2021-07-13","title":"1.2.4 - 2021-07-13","text":""},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Aggregation preset method outputs</li> </ul>"},{"location":"changelog/#implementation_58","title":"Implementation","text":"<ul> <li>Issue - https://github.com/roman-right/beanie/issues/91</li> </ul>"},{"location":"changelog/#123-2021-07-08","title":"1.2.3 - 2021-07-08","text":""},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Pyright issues</li> </ul>"},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Doc publishing on merge to the main branch </li> </ul>"},{"location":"changelog/#implementation_59","title":"Implementation","text":"<ul> <li>Issue - https://github.com/roman-right/beanie/issues/87</li> <li>Issue - https://github.com/roman-right/beanie/issues/70</li> </ul>"},{"location":"changelog/#122-2021-07-06","title":"1.2.2 - 2021-07-06","text":""},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Bool types in search criteria</li> </ul>"},{"location":"changelog/#implementation_60","title":"Implementation","text":"<ul> <li>Issue - https://github.com/roman-right/beanie/issues/85</li> </ul>"},{"location":"changelog/#121-2021-07-06","title":"1.2.1 - 2021-07-06","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Document, FindQuery, Aggregation typings</li> </ul>"},{"location":"changelog/#implementation_61","title":"Implementation","text":"<ul> <li>Author - Kira</li> <li>Issue - https://github.com/roman-right/beanie/issues/69</li> </ul>"},{"location":"changelog/#120-2021-06-25","title":"1.2.0 - 2021-06-25","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Upsert</li> </ul>"},{"location":"changelog/#implementation_62","title":"Implementation","text":"<ul> <li>Issue - https://github.com/roman-right/beanie/issues/64</li> </ul>"},{"location":"changelog/#116-2021-06-21","title":"1.1.6 - 2021-06-21","text":""},{"location":"changelog/#fix_20","title":"Fix","text":"<ul> <li>Pydantic dependency version ^1.5</li> </ul>"},{"location":"changelog/#implementation_63","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/71</li> </ul>"},{"location":"changelog/#115-2021-06-17","title":"1.1.5 - 2021-06-17","text":""},{"location":"changelog/#fix_21","title":"Fix","text":"<ul> <li>Convert document id to the right type in the <code>get()</code> method</li> </ul>"},{"location":"changelog/#implementation_64","title":"Implementation","text":"<ul> <li>ISSUE - https://github.com/roman-right/beanie/issues/65</li> </ul>"},{"location":"changelog/#114-2021-06-15","title":"1.1.4 - 2021-06-15","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Stricter flake8 and fixing resulting errors</li> </ul>"},{"location":"changelog/#implementation_65","title":"Implementation","text":"<ul> <li>Author - Joran van Apeldoorn</li> <li>PR - https://github.com/roman-right/beanie/pull/62</li> </ul>"},{"location":"changelog/#113-2021-06-15","title":"1.1.3 - 2021-06-15","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>MyPy to pre-commit</li> </ul>"},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Typing errors</li> </ul>"},{"location":"changelog/#implementation_66","title":"Implementation","text":"<ul> <li>Author - Joran van Apeldoorn</li> <li>PR - https://github.com/roman-right/beanie/pull/54</li> </ul>"},{"location":"changelog/#112-2021-06-14","title":"1.1.2 - 2021-06-14","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Skip migration test when transactions not available</li> </ul>"},{"location":"changelog/#implementation_67","title":"Implementation","text":"<ul> <li>Author - Joran van Apeldoorn</li> <li>PR - https://github.com/roman-right/beanie/pull/50</li> </ul>"},{"location":"changelog/#111-2021-06-14","title":"1.1.1 - 2021-06-14","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Save method</li> </ul>"},{"location":"changelog/#implementation_68","title":"Implementation","text":"<ul> <li>Author - Joran van Apeldoorn</li> <li>PR - https://github.com/roman-right/beanie/pull/47</li> </ul>"},{"location":"changelog/#110-2021-06-02","title":"1.1.0 - 2021-06-02","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Custom id types.</li> </ul>"},{"location":"changelog/#implementation_69","title":"Implementation","text":"<ul> <li>Issue - https://github.com/roman-right/beanie/issues/12</li> </ul>"},{"location":"changelog/#106-2021-06-01","title":"1.0.6 - 2021-06-01","text":""},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Typo in the module name.</li> </ul>"},{"location":"changelog/#implementation_70","title":"Implementation","text":"<ul> <li>Author - Joran van Apeldoorn</li> <li>PR - https://github.com/roman-right/beanie/pull/44</li> </ul>"},{"location":"changelog/#105-2021-05-25","title":"1.0.5 - 2021-05-25","text":""},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Typing.</li> </ul>"},{"location":"changelog/#implementation_71","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/40</li> </ul>"},{"location":"changelog/#104-2021-05-18","title":"1.0.4 - 2021-05-18","text":""},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li><code>aggregation_model</code> -&gt; <code>projection_model</code></li> </ul>"},{"location":"changelog/#implementation_72","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/39</li> </ul>"},{"location":"changelog/#103-2021-05-16","title":"1.0.3 - 2021-05-16","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Index kwargs in the Indexed field</li> </ul>"},{"location":"changelog/#implementation_73","title":"Implementation","text":"<ul> <li>Author - Michael duPont</li> <li>PR - https://github.com/roman-right/beanie/pull/32</li> </ul>"},{"location":"changelog/#102-2021-05-16","title":"1.0.2 - 2021-05-16","text":""},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Deprecated import</li> </ul>"},{"location":"changelog/#implementation_74","title":"Implementation","text":"<ul> <li>Author - Oliver Andrich</li> <li>PR - https://github.com/roman-right/beanie/pull/33</li> </ul>"},{"location":"changelog/#101-2021-05-14","title":"1.0.1 - 2021-05-14","text":""},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li><code>Document</code> self annotation</li> </ul>"},{"location":"changelog/#implementation_75","title":"Implementation","text":"<ul> <li>Issue - https://github.com/roman-right/beanie/issues/29</li> </ul>"},{"location":"changelog/#100-2021-05-10","title":"1.0.0 - 2021-05-10","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>QueryBuilder</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Document class was   reworked. Documentation</li> </ul>"},{"location":"changelog/#implementation_76","title":"Implementation","text":"<ul> <li>PR - https://github.com/roman-right/beanie/pull/27</li> </ul>"},{"location":"changelog/#043-2021-04-25","title":"0.4.3 - 2021-04-25","text":""},{"location":"changelog/#fixed_17","title":"Fixed","text":"<ul> <li>PydanticObjectId openapi generation</li> </ul>"},{"location":"changelog/#042-2021-04-20","title":"0.4.2 - 2021-04-20","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>Python ^3.6.1 support.</li> </ul>"},{"location":"changelog/#fixed_18","title":"Fixed","text":"<ul> <li>Documents init order in migrations</li> </ul>"},{"location":"changelog/#041-2021-04-19","title":"0.4.1 - 2021-04-19","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>Projections support to reduce database load</li> </ul>"},{"location":"changelog/#implementation_77","title":"Implementation","text":"<ul> <li>Author - Nicholas Smith</li> <li>Issue - https://github.com/roman-right/beanie/issues/16</li> </ul>"},{"location":"changelog/#040-2021-04-18","title":"0.4.0 - 2021-04-18","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>ODM Documentation</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Documentation</li> </ul>"},{"location":"changelog/#040b1-2021-04-14","title":"0.4.0b1 - 2021-04-14","text":""},{"location":"changelog/#added_18","title":"Added","text":"<ul> <li>Migrations</li> <li><code>inspect_collection</code> Document method</li> <li><code>count_documents</code> Document method</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Session can be provided to the most of the Document methods</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Internal <code>DocumentMeta</code> class.</li> </ul>"},{"location":"changelog/#034-2021-04-09","title":"0.3.4 - 2021-04-09","text":""},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li><code>Indexed(...)</code> field supports index types.</li> </ul>"},{"location":"changelog/#implementation_78","title":"Implementation","text":"<ul> <li>Author - Joran van Apeldoorn</li> </ul>"},{"location":"changelog/#033-2021-04-09","title":"0.3.3 - 2021-04-09","text":""},{"location":"changelog/#added_19","title":"Added","text":"<ul> <li>Simple indexes via type hints.</li> </ul>"},{"location":"changelog/#implementation_79","title":"Implementation","text":"<ul> <li>Author - Joran van Apeldoorn</li> </ul>"},{"location":"changelog/#032-2021-03-25","title":"0.3.2 - 2021-03-25","text":""},{"location":"changelog/#added_20","title":"Added","text":"<ul> <li><code>init_beanie</code> supports also lists of strings with model paths as   the<code>document_models</code> parameter.</li> </ul>"},{"location":"changelog/#implementation_80","title":"Implementation","text":"<ul> <li>Author - Mohamed Nesredin</li> </ul>"},{"location":"changelog/#031-2021-03-21","title":"0.3.1 - 2021-03-21","text":""},{"location":"changelog/#added_21","title":"Added","text":"<ul> <li><code>skip</code>, <code>limit</code> and <code>sort</code> parameters in the <code>find_many</code> and <code>find_all</code>   methods. Documentation</li> </ul>"},{"location":"changelog/#030-2021-03-19","title":"0.3.0 - 2021-03-19","text":""},{"location":"changelog/#added_22","title":"Added","text":"<ul> <li><code>Collection</code> - internal class of the <code>Document</code> to set up additional   properties.</li> <li>Indexes support.</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Breaking change: <code>init_beanie</code> is async function now.</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Internal <code>DocumentMeta</code> class. Will be removed in 0.4.0.</li> </ul>"},{"location":"code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at roman-right@protonmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"development/","title":"Development","text":"<p>Hopefully, you have landed here because you would like to help out with the development of Beanie. Whether through adding new features, fixing bugs, or extending documentation, your help is really appreciated! Please read this page carefully. If you have any questions, drop by on the Discord.</p> <p>Also, please read the Code of Conduct.</p>"},{"location":"development/#setting-up-the-development-environment","title":"Setting up the development environment","text":"<p>We assume you are familiar with the general forking and pull request workflow for submitting to open-source projects. If not, don't worry, there are plenty of good guides available. Maybe check out this one.</p> <p>All the dependencies and build configs are set in the <code>pyproject.toml</code> file. There are three main dependency sections there:</p> <ul> <li>dependencies: for the dependencies required to run Beanie</li> <li>test: for the dependencies required to run tests</li> <li>doc: for the dependencies required to build the documentation</li> </ul> <p>And there are other extra dependency sections for Beanie batteries. For example, the <code>queue</code> section contains dependencies that extend features of Beanie with a queue.</p> <p>To install all required dependencies, including test dependencies, in a virtual environment, run the following command in the root directory of the Beanie project:</p> <pre><code>pip install -e .[test]\n</code></pre> <p>To install dependencies required for building the documentation, run:</p> <pre><code>pip install -e .[doc]\n</code></pre>"},{"location":"development/#database-connection","title":"Database connection","text":"<p>To run tests and use Beanie in general, you will need an accessible MongoDB database. To use migrations, you will need a connection to a Replica Set or Mongos instance. All tests assume that the database is hosted locally on port <code>27017</code> and do not require authentication.</p>"},{"location":"development/#testing","title":"Testing","text":"<p>Beanie uses pytest for unit testing. To ensure the stability of Beanie, each added feature must be tested in a separate unit test, even if it looks like other tests are covering it now. This strategy guarantees that:</p> <ul> <li>All the features will be covered and stay covered.</li> <li>There is independence from other features and test cases.</li> </ul> <p>To run the test suite, make sure that you have MongoDB running and run <code>pytest</code>.</p>"},{"location":"development/#submitting-new-code","title":"Submitting new code","text":"<p>You can submit your changes through a pull request on GitHub. Please take into account the following sections.</p>"},{"location":"development/#use-pre-commit","title":"Use pre-commit","text":"<p>To ensure code consistency, Beanie uses Black and Ruff through pre-commit. To set it up, run:</p> <pre><code>pre-commit install\n</code></pre> <p>This will add the pre-commit command to your git's pre-commit hooks and make sure you never forget to run these.</p>"},{"location":"development/#single-commit","title":"Single commit","text":"<p>To make the pull request reviewing easier and keep the version tree clean, your pull request should consist of a single commit. It is natural that your branch might contain multiple commits, so you will need to squash these into a single commit. Instructions can be found here or here.</p>"},{"location":"development/#add-documentation","title":"Add documentation","text":"<p>Please write clear documentation for any new functionality you add. Docstrings will be converted to the API documentation, but more human-friendly documentation might also be needed! See the section below.</p>"},{"location":"development/#working-on-the-documentation","title":"Working on the documentation","text":"<p>The documentation is generated using <code>pydoc-markdown</code>. To see a preview of any edits you make, you can run:</p> <pre><code>pydoc-markdown --server\n</code></pre> <p>and visit the printed address (usually <code>localhost:8000</code>) in your browser. Beware, the auto-recompiling might not work for everyone. This will automatically generate the API documentation from the source. All other documentation should be written by hand. The documentation is compiled using <code>mkdocs</code> behind the scenes. To change the table of contents or other options, check out <code>pydoc-markdown.yml</code>.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installing-beanie","title":"Installing beanie","text":"<p>You can simply install Beanie from the PyPI:</p>"},{"location":"getting-started/#pip","title":"PIP","text":"<pre><code>pip install beanie\n</code></pre>"},{"location":"getting-started/#poetry","title":"Poetry","text":"<pre><code>poetry add beanie\n</code></pre>"},{"location":"getting-started/#optional-dependencies","title":"Optional dependencies","text":"<p>Beanie supports some optional dependencies from Motor (<code>pip</code> or <code>poetry</code> can be used).</p> <p>GSSAPI authentication requires <code>gssapi</code> extra dependency:</p> <pre><code>pip install \"beanie[gssapi]\"\n</code></pre> <p>MONGODB-AWS authentication requires <code>aws</code> extra dependency:</p> <pre><code>pip install \"beanie[aws]\"\n</code></pre> <p>Support for mongodb+srv:// URIs requires <code>srv</code> extra dependency:</p> <pre><code>pip install \"beanie[srv]\"\n</code></pre> <p>OCSP requires <code>ocsp</code> extra dependency:</p> <pre><code>pip install \"beanie[ocsp]\"\n</code></pre> <p>Wire protocol compression with snappy requires <code>snappy</code> extra dependency:</p> <pre><code>pip install \"beanie[snappy]\"\n</code></pre> <p>Wire protocol compression with zstandard requires <code>zstd</code> extra dependency:</p> <pre><code>pip install \"beanie[zstd]\"\n</code></pre> <p>Client-Side Field Level Encryption requires <code>encryption</code> extra dependency:</p> <pre><code>pip install \"beanie[encryption]\"\n</code></pre> <p>You can install all dependencies automatically with the following command:</p> <pre><code>pip install \"beanie[gssapi,aws,ocsp,snappy,srv,zstd,encryption]\"\n</code></pre>"},{"location":"getting-started/#initialization","title":"Initialization","text":"<p>Getting Beanie setup in your code is really easy:</p> <ol> <li>Write your database model as a Pydantic class but use <code>beanie.Document</code> instead of <code>pydantic.BaseModel</code>.</li> <li>Initialize Motor, as Beanie uses this as an async database engine under the hood.</li> <li>Call <code>beanie.init_beanie</code> with the Motor client and list of Beanie models</li> </ol> <p>The code below should get you started and shows some of the field types that you can use with beanie.</p> <pre><code>from typing import Optional\n\nimport motor.motor_asyncio\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed, init_beanie\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\n# This is the model that will be saved to the database\nclass Product(Document):\n    name: str                          # You can use normal types just like in pydantic\n    description: Optional[str] = None\n    price: Indexed(float)              # You can also specify that a field should correspond to an index\n    category: Category                 # You can include pydantic models as well\n\n\n# Call this from within your event loop to get beanie setup.\nasync def init():\n    # Create Motor client\n    client = AsyncIOMotorClient(\"mongodb://user:pass@host:27017\")\n\n    # Init beanie with the Product document class\n    await init_beanie(database=client.db_name, document_models=[Product])\n</code></pre>"},{"location":"api-documentation/document/","title":"Document","text":""},{"location":"api-documentation/document/#beanieodmdocuments","title":"beanie.odm.documents","text":""},{"location":"api-documentation/document/#document","title":"Document","text":"<pre><code>class Document(LazyModel, SettersInterface, InheritanceInterface,\n               FindInterface, AggregateInterface, OtherGettersInterface)\n</code></pre> <p>Document Mapping class.</p> <p>Fields:</p> <ul> <li><code>id</code> - MongoDB document ObjectID \"_id\" field. Mapped to the PydanticObjectId class</li> </ul> <p></p>"},{"location":"api-documentation/document/#documentget","title":"Document.get","text":"<pre><code>@classmethod\nasync def get(cls: Type[\"DocType\"],\n              document_id: Any,\n              session: Optional[AsyncIOMotorClientSession] = None,\n              ignore_cache: bool = False,\n              fetch_links: bool = False,\n              with_children: bool = False,\n              nesting_depth: Optional[int] = None,\n              nesting_depths_per_field: Optional[Dict[str, int]] = None,\n              **pymongo_kwargs: Any) -&gt; Optional[\"DocType\"]\n</code></pre> <p>Get document by id, returns None if document does not exist</p> <p>Arguments:</p> <ul> <li><code>document_id</code>: PydanticObjectId - document id</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>ignore_cache</code>: bool - ignore cache (if it is turned on)</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for find operation</li> </ul> <p>Returns:</p> <p>Union[\"Document\", None]</p> <p></p>"},{"location":"api-documentation/document/#documentsync","title":"Document.sync","text":"<pre><code>async def sync(merge_strategy: MergeStrategy = MergeStrategy.remote)\n</code></pre> <p>Sync the document with the database</p> <p>Arguments:</p> <ul> <li><code>merge_strategy</code>: MergeStrategy - how to merge the document</li> </ul> <p>Returns:</p> <p>None</p> <p></p>"},{"location":"api-documentation/document/#documentinsert","title":"Document.insert","text":"<pre><code>@wrap_with_actions(EventTypes.INSERT)\n@save_state_after\n@validate_self_before\nasync def insert(\n        *,\n        link_rule: WriteRules = WriteRules.DO_NOTHING,\n        session: Optional[AsyncIOMotorClientSession] = None,\n        skip_actions: Optional[List[Union[ActionDirections,\n                                          str]]] = None) -&gt; Self\n</code></pre> <p>Insert the document (self) to the collection</p> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/document/#documentcreate","title":"Document.create","text":"<pre><code>async def create(session: Optional[AsyncIOMotorClientSession] = None) -&gt; Self\n</code></pre> <p>The same as self.insert()</p> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/document/#documentinsert_one","title":"Document.insert_one","text":"<pre><code>@classmethod\nasync def insert_one(\n        cls: Type[DocType],\n        document: DocType,\n        session: Optional[AsyncIOMotorClientSession] = None,\n        bulk_writer: Optional[\"BulkWriter\"] = None,\n        link_rule: WriteRules = WriteRules.DO_NOTHING) -&gt; Optional[DocType]\n</code></pre> <p>Insert one document to the collection</p> <p>Arguments:</p> <ul> <li><code>document</code>: Document - document to insert</li> <li><code>session</code>: AsyncIOMotorClientSession - motor session</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> <li><code>link_rule</code>: InsertRules - hot to manage link fields</li> </ul> <p>Returns:</p> <p>DocType</p> <p></p>"},{"location":"api-documentation/document/#documentinsert_many","title":"Document.insert_many","text":"<pre><code>@classmethod\nasync def insert_many(cls: Type[DocType],\n                      documents: Iterable[DocType],\n                      session: Optional[AsyncIOMotorClientSession] = None,\n                      link_rule: WriteRules = WriteRules.DO_NOTHING,\n                      **pymongo_kwargs: Any) -&gt; InsertManyResult\n</code></pre> <p>Insert many documents to the collection</p> <p>Arguments:</p> <ul> <li><code>documents</code>: List[\"Document\"] - documents to insert</li> <li><code>session</code>: AsyncIOMotorClientSession - motor session</li> <li><code>link_rule</code>: InsertRules - how to manage link fields</li> </ul> <p>Returns:</p> <p>InsertManyResult</p> <p></p>"},{"location":"api-documentation/document/#documentreplace","title":"Document.replace","text":"<pre><code>@wrap_with_actions(EventTypes.REPLACE)\n@save_state_after\n@validate_self_before\nasync def replace(\n        ignore_revision: bool = False,\n        session: Optional[AsyncIOMotorClientSession] = None,\n        bulk_writer: Optional[BulkWriter] = None,\n        link_rule: WriteRules = WriteRules.DO_NOTHING,\n        skip_actions: Optional[List[Union[ActionDirections,\n                                          str]]] = None) -&gt; Self\n</code></pre> <p>Fully update the document in the database</p> <p>Arguments:</p> <ul> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session.</li> <li><code>ignore_revision</code>: bool - do force replace. Used when revision based protection is turned on.</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/document/#documentsave","title":"Document.save","text":"<pre><code>@wrap_with_actions(EventTypes.SAVE)\n@save_state_after\n@validate_self_before\nasync def save(session: Optional[AsyncIOMotorClientSession] = None,\n               link_rule: WriteRules = WriteRules.DO_NOTHING,\n               ignore_revision: bool = False,\n               **kwargs: Any) -&gt; Self\n</code></pre> <p>Update an existing model in the database or</p> <p>insert it if it does not yet exist.</p> <p>Arguments:</p> <ul> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session.</li> <li><code>link_rule</code>: WriteRules - rules how to deal with links on writing</li> <li><code>ignore_revision</code>: bool - do force save.</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/document/#documentsave_changes","title":"Document.save_changes","text":"<pre><code>@saved_state_needed\n@wrap_with_actions(EventTypes.SAVE_CHANGES)\n@validate_self_before\nasync def save_changes(\n    ignore_revision: bool = False,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    bulk_writer: Optional[BulkWriter] = None,\n    skip_actions: Optional[List[Union[ActionDirections, str]]] = None\n) -&gt; Optional[Self]\n</code></pre> <p>Save changes.</p> <p>State management usage must be turned on</p> <p>Arguments:</p> <ul> <li><code>ignore_revision</code>: bool - ignore revision id, if revision is turned on</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> </ul> <p>Returns:</p> <p>Optional[self]</p> <p></p>"},{"location":"api-documentation/document/#documentreplace_many","title":"Document.replace_many","text":"<pre><code>@classmethod\nasync def replace_many(\n        cls: Type[DocType],\n        documents: List[DocType],\n        session: Optional[AsyncIOMotorClientSession] = None) -&gt; None\n</code></pre> <p>Replace list of documents</p> <p>Arguments:</p> <ul> <li><code>documents</code>: List[\"Document\"]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session.</li> </ul> <p>Returns:</p> <p>None</p> <p></p>"},{"location":"api-documentation/document/#documentupdate","title":"Document.update","text":"<pre><code>@wrap_with_actions(EventTypes.UPDATE)\n@save_state_after\nasync def update(*args: Union[Dict[Any, Any], Mapping[Any, Any]],\n                 ignore_revision: bool = False,\n                 session: Optional[AsyncIOMotorClientSession] = None,\n                 bulk_writer: Optional[BulkWriter] = None,\n                 skip_actions: Optional[List[Union[ActionDirections,\n                                                   str]]] = None,\n                 skip_sync: Optional[bool] = None,\n                 **pymongo_kwargs: Any) -&gt; Self\n</code></pre> <p>Partially update the document in the database</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Union[dict, Mapping] - the modifications to apply.</li> <li><code>session</code>: AsyncIOMotorClientSession - motor session.</li> <li><code>ignore_revision</code>: bool - force update. Will update even if revision id is not the same, as stored</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> <li><code>pymongo_kwargs</code>: pymongo native parameters for update operation</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/document/#documentupdate_all","title":"Document.update_all","text":"<pre><code>@classmethod\ndef update_all(cls,\n               *args: Union[dict, Mapping],\n               session: Optional[AsyncIOMotorClientSession] = None,\n               bulk_writer: Optional[BulkWriter] = None,\n               **pymongo_kwargs: Any) -&gt; UpdateMany\n</code></pre> <p>Partially update all the documents</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Union[dict, Mapping] - the modifications to apply.</li> <li><code>session</code>: AsyncIOMotorClientSession - motor session.</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for find operation</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/document/#documentset","title":"Document.set","text":"<pre><code>def set(expression: Dict[Union[ExpressionField, str, Any], Any],\n        session: Optional[AsyncIOMotorClientSession] = None,\n        bulk_writer: Optional[BulkWriter] = None,\n        skip_sync: Optional[bool] = None,\n        **kwargs: Any) -&gt; Coroutine[None, None, Self]\n</code></pre> <p>Set values</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nawait Document.find(Sample.one == 1).set({Sample.one: 100})\n</code></pre> <p>Uses Set operator</p> <p>Arguments:</p> <ul> <li><code>expression</code>: Dict[Union[ExpressionField, str, Any], Any] - keys and values to set</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>bulk_writer</code>: Optional[BulkWriter] - bulk writer</li> <li><code>skip_sync</code>: bool - skip doc syncing. Available for the direct instances only</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/document/#documentcurrent_date","title":"Document.current_date","text":"<pre><code>def current_date(expression: Dict[Union[datetime, ExpressionField, str], Any],\n                 session: Optional[AsyncIOMotorClientSession] = None,\n                 bulk_writer: Optional[BulkWriter] = None,\n                 skip_sync: Optional[bool] = None,\n                 **kwargs: Any) -&gt; Coroutine[None, None, Self]\n</code></pre> <p>Set current date</p> <p>Uses CurrentDate operator</p> <p>Arguments:</p> <ul> <li><code>expression</code>: Dict[Union[datetime, ExpressionField, str], Any]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>bulk_writer</code>: Optional[BulkWriter] - bulk writer</li> <li><code>skip_sync</code>: bool - skip doc syncing. Available for the direct instances only</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/document/#documentinc","title":"Document.inc","text":"<pre><code>def inc(expression: Dict[Union[ExpressionField, float, int, str], Any],\n        session: Optional[AsyncIOMotorClientSession] = None,\n        bulk_writer: Optional[BulkWriter] = None,\n        skip_sync: Optional[bool] = None,\n        **kwargs: Any) -&gt; Coroutine[None, None, Self]\n</code></pre> <p>Increment</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nawait Document.find(Sample.one == 1).inc({Sample.one: 100})\n</code></pre> <p>Uses Inc operator</p> <p>Arguments:</p> <ul> <li><code>expression</code>: Dict[Union[ExpressionField, float, int, str], Any]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>bulk_writer</code>: Optional[BulkWriter] - bulk writer</li> <li><code>skip_sync</code>: bool - skip doc syncing. Available for the direct instances only</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/document/#documentdelete","title":"Document.delete","text":"<pre><code>@wrap_with_actions(EventTypes.DELETE)\nasync def delete(session: Optional[AsyncIOMotorClientSession] = None,\n                 bulk_writer: Optional[BulkWriter] = None,\n                 link_rule: DeleteRules = DeleteRules.DO_NOTHING,\n                 skip_actions: Optional[List[Union[ActionDirections,\n                                                   str]]] = None,\n                 **pymongo_kwargs: Any) -&gt; Optional[DeleteResult]\n</code></pre> <p>Delete the document</p> <p>Arguments:</p> <ul> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session.</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> <li><code>link_rule</code>: DeleteRules - rules for link fields</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for delete operation</li> </ul> <p>Returns:</p> <p>Optional[DeleteResult] - pymongo DeleteResult instance.</p> <p></p>"},{"location":"api-documentation/document/#documentdelete_all","title":"Document.delete_all","text":"<pre><code>@classmethod\nasync def delete_all(cls,\n                     session: Optional[AsyncIOMotorClientSession] = None,\n                     bulk_writer: Optional[BulkWriter] = None,\n                     **pymongo_kwargs: Any) -&gt; Optional[DeleteResult]\n</code></pre> <p>Delete all the documents</p> <p>Arguments:</p> <ul> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session.</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for delete operation</li> </ul> <p>Returns:</p> <p>Optional[DeleteResult] - pymongo DeleteResult instance.</p> <p></p>"},{"location":"api-documentation/document/#documentuse_state_management","title":"Document.use_state_management","text":"<pre><code>@classmethod\ndef use_state_management(cls) -&gt; bool\n</code></pre> <p>Is state management turned on</p> <p>Returns:</p> <p>bool</p> <p></p>"},{"location":"api-documentation/document/#documentstate_management_save_previous","title":"Document.state_management_save_previous","text":"<pre><code>@classmethod\ndef state_management_save_previous(cls) -&gt; bool\n</code></pre> <p>Should we save the previous state after a commit to database</p> <p>Returns:</p> <p>bool</p> <p></p>"},{"location":"api-documentation/document/#documentstate_management_replace_objects","title":"Document.state_management_replace_objects","text":"<pre><code>@classmethod\ndef state_management_replace_objects(cls) -&gt; bool\n</code></pre> <p>Should objects be replaced when using state management</p> <p>Returns:</p> <p>bool</p> <p></p>"},{"location":"api-documentation/document/#documentget_saved_state","title":"Document.get_saved_state","text":"<pre><code>def get_saved_state() -&gt; Optional[Dict[str, Any]]\n</code></pre> <p>Saved state getter. It is protected property.</p> <p>Returns:</p> <p>Optional[Dict[str, Any]] - saved state</p> <p></p>"},{"location":"api-documentation/document/#documentget_previous_saved_state","title":"Document.get_previous_saved_state","text":"<pre><code>def get_previous_saved_state() -&gt; Optional[Dict[str, Any]]\n</code></pre> <p>Previous state getter. It is a protected property.</p> <p>Returns:</p> <p>Optional[Dict[str, Any]] - previous state</p> <p></p>"},{"location":"api-documentation/document/#documentget_settings","title":"Document.get_settings","text":"<pre><code>@classmethod\ndef get_settings(cls) -&gt; DocumentSettings\n</code></pre> <p>Get document settings, which was created on</p> <p>the initialization step</p> <p>Returns:</p> <p>DocumentSettings class</p> <p></p>"},{"location":"api-documentation/document/#documentinspect_collection","title":"Document.inspect_collection","text":"<pre><code>@classmethod\nasync def inspect_collection(\n        cls,\n        session: Optional[AsyncIOMotorClientSession] = None\n) -&gt; InspectionResult\n</code></pre> <p>Check, if documents, stored in the MongoDB collection</p> <p>are compatible with the Document schema</p> <p>Returns:</p> <p>InspectionResult</p> <p></p>"},{"location":"api-documentation/document/#documentbulk_writer","title":"Document.bulk_writer","text":"<pre><code>@classmethod\ndef bulk_writer(cls,\n                session: Optional[AsyncIOMotorClientSession] = None,\n                ordered: bool = True,\n                bypass_document_validation: bool = False,\n                comment: Optional[Any] = None) -&gt; BulkWriter\n</code></pre> <p>Returns a BulkWriter instance for handling bulk write operations.</p> <p>Arguments:</p> <ul> <li><code>session</code>: ClientSession The session instance used for transactional operations.</li> <li><code>ordered</code>: bool If <code>True</code> (the default), requests will be performed on the server serially, in the order provided. If an error occurs, all remaining operations are aborted. If <code>False</code>, requests will be performed on the server in arbitrary order, possibly in parallel, and all operations will be attempted.</li> <li><code>bypass_document_validation</code>: bool, optional If <code>True</code>, allows the write to opt-out of document-level validation. Default is <code>False</code>.</li> <li><code>comment</code>: str, optional A user-provided comment to attach to the BulkWriter.</li> </ul> <p>Returns:</p> <p>BulkWriter An instance of BulkWriter configured with the provided settings.</p>"},{"location":"api-documentation/document/#example-usage","title":"Example Usage:","text":"<p>This method is typically used within an asynchronous context manager.</p> <p>.. code-block:: python</p> <pre><code>async with Document.bulk_writer(ordered=True) as bulk:\n    await Document.insert_one(Document(field=\"value\"), bulk_writer=bulk)\n</code></pre>"},{"location":"api-documentation/fields/","title":"Fields","text":""},{"location":"api-documentation/fields/#beanieodmfields","title":"beanie.odm.fields","text":""},{"location":"api-documentation/fields/#indexed","title":"Indexed","text":"<pre><code>def Indexed(typ=None, index_type=ASCENDING, **kwargs: Any)\n</code></pre> <p>If <code>typ</code> is defined, returns a subclass of <code>typ</code> with an extra attribute <code>_indexed</code> as a tuple: - Index 0: <code>index_type</code> such as <code>pymongo.ASCENDING</code> - Index 1: <code>kwargs</code> passed to <code>IndexModel</code> When instantiated the type of the result will actually be <code>typ</code>.</p> <p>When <code>typ</code> is not defined, returns an <code>IndexedAnnotation</code> instance, to be used as metadata in <code>Annotated</code> fields.</p> <p>Example:</p> <pre><code># Both fields would have the same behavior\nclass MyModel(BaseModel):\n    field1: Indexed(str, unique=True)\n    field2: Annotated[str, Indexed(unique=True)]\n</code></pre> <p></p>"},{"location":"api-documentation/fields/#pydanticobjectid","title":"PydanticObjectId","text":"<pre><code>class PydanticObjectId(ObjectId)\n</code></pre> <p>Object Id field. Compatible with Pydantic.</p> <p></p>"},{"location":"api-documentation/fields/#expressionfield","title":"ExpressionField","text":"<pre><code>class ExpressionField(str)\n</code></pre>"},{"location":"api-documentation/fields/#expressionfield__getitem__","title":"ExpressionField.__getitem__","text":"<pre><code>def __getitem__(item)\n</code></pre> <p>Get sub field</p> <p>Arguments:</p> <ul> <li><code>item</code>: name of the subfield</li> </ul> <p>Returns:</p> <p>ExpressionField</p> <p></p>"},{"location":"api-documentation/fields/#expressionfield__getattr__","title":"ExpressionField.__getattr__","text":"<pre><code>def __getattr__(item)\n</code></pre> <p>Get sub field</p> <p>Arguments:</p> <ul> <li><code>item</code>: name of the subfield</li> </ul> <p>Returns:</p> <p>ExpressionField</p> <p></p>"},{"location":"api-documentation/fields/#linkinfo","title":"LinkInfo","text":"<pre><code>class LinkInfo(BaseModel)\n</code></pre>"},{"location":"api-documentation/fields/#linkinfodocument_class","title":"LinkInfo.document_class","text":"<p>Document class</p> <p></p>"},{"location":"api-documentation/fields/#link","title":"Link","text":"<pre><code>class Link(Generic[T])\n</code></pre>"},{"location":"api-documentation/fields/#linkfetch_list","title":"Link.fetch_list","text":"<pre><code>@classmethod\nasync def fetch_list(cls,\n                     links: List[Union[Link[T], DocType]],\n                     fetch_links: bool = False)\n</code></pre> <p>Fetch list that contains links and documents</p> <p>Arguments:</p> <ul> <li><code>links</code>: </li> <li><code>fetch_links</code>: </li> </ul> <p></p>"},{"location":"api-documentation/fields/#backlink","title":"BackLink","text":"<pre><code>class BackLink(Generic[T])\n</code></pre> <p>Back reference to a document</p>"},{"location":"api-documentation/interfaces/","title":"Interfaces","text":""},{"location":"api-documentation/interfaces/#beanieodminterfacesfind","title":"beanie.odm.interfaces.find","text":""},{"location":"api-documentation/interfaces/#findinterface","title":"FindInterface","text":"<pre><code>class FindInterface()\n</code></pre>"},{"location":"api-documentation/interfaces/#findinterfacefind_one","title":"FindInterface.find_one","text":"<pre><code>@classmethod\ndef find_one(\n    cls: Type[FindType],\n    *args: Union[Mapping[str, Any], bool],\n    projection_model: Optional[Type[\"DocumentProjectionType\"]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    fetch_links: bool = False,\n    with_children: bool = False,\n    nesting_depth: Optional[int] = None,\n    nesting_depths_per_field: Optional[Dict[str, int]] = None,\n    **pymongo_kwargs: Any\n) -&gt; Union[FindOne[FindType], FindOne[\"DocumentProjectionType\"]]\n</code></pre> <p>Find one document by criteria.</p> <p>Returns FindOne query object. When awaited this will either return a document or None if no document exists for the search criteria.</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str, Any] - search criteria</li> <li><code>projection_model</code>: Optional[Type[BaseModel]] - projection model</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session instance</li> <li><code>ignore_cache</code>: bool</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for find operation (if Document class contains links, this parameter must fit the respective parameter of the aggregate MongoDB function)</li> </ul> <p>Returns:</p> <p>FindOne - find query instance</p> <p></p>"},{"location":"api-documentation/interfaces/#findinterfacefind_many","title":"FindInterface.find_many","text":"<pre><code>@classmethod\ndef find_many(\n    cls: Type[FindType],\n    *args: Union[Mapping[str, Any], bool],\n    projection_model: Optional[Type[\"DocumentProjectionType\"]] = None,\n    skip: Optional[int] = None,\n    limit: Optional[int] = None,\n    sort: Union[None, str, List[Tuple[str, SortDirection]]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    fetch_links: bool = False,\n    with_children: bool = False,\n    lazy_parse: bool = False,\n    nesting_depth: Optional[int] = None,\n    nesting_depths_per_field: Optional[Dict[str, int]] = None,\n    **pymongo_kwargs: Any\n) -&gt; Union[FindMany[FindType], FindMany[\"DocumentProjectionType\"]]\n</code></pre> <p>Find many documents by criteria.</p> <p>Returns FindMany query object</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str, Any] - search criteria</li> <li><code>skip</code>: Optional[int] - The number of documents to omit.</li> <li><code>limit</code>: Optional[int] - The maximum number of results to return.</li> <li><code>sort</code>: Union[None, str, List[Tuple[str, SortDirection]]] - A key or a list of (key, direction) pairs specifying the sort order for this query.</li> <li><code>projection_model</code>: Optional[Type[BaseModel]] - projection model</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>ignore_cache</code>: bool</li> <li><code>lazy_parse</code>: bool</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for find operation (if Document class contains links, this parameter must fit the respective parameter of the aggregate MongoDB function)</li> </ul> <p>Returns:</p> <p>FindMany - query instance</p> <p></p>"},{"location":"api-documentation/interfaces/#findinterfacefind","title":"FindInterface.find","text":"<pre><code>@classmethod\ndef find(\n    cls: Type[FindType],\n    *args: Union[Mapping[str, Any], bool],\n    projection_model: Optional[Type[\"DocumentProjectionType\"]] = None,\n    skip: Optional[int] = None,\n    limit: Optional[int] = None,\n    sort: Union[None, str, List[Tuple[str, SortDirection]]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    fetch_links: bool = False,\n    with_children: bool = False,\n    lazy_parse: bool = False,\n    nesting_depth: Optional[int] = None,\n    nesting_depths_per_field: Optional[Dict[str, int]] = None,\n    **pymongo_kwargs: Any\n) -&gt; Union[FindMany[FindType], FindMany[\"DocumentProjectionType\"]]\n</code></pre> <p>The same as find_many</p> <p></p>"},{"location":"api-documentation/interfaces/#findinterfacefind_all","title":"FindInterface.find_all","text":"<pre><code>@classmethod\ndef find_all(\n    cls: Type[FindType],\n    skip: Optional[int] = None,\n    limit: Optional[int] = None,\n    sort: Union[None, str, List[Tuple[str, SortDirection]]] = None,\n    projection_model: Optional[Type[\"DocumentProjectionType\"]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    with_children: bool = False,\n    lazy_parse: bool = False,\n    nesting_depth: Optional[int] = None,\n    nesting_depths_per_field: Optional[Dict[str, int]] = None,\n    **pymongo_kwargs: Any\n) -&gt; Union[FindMany[FindType], FindMany[\"DocumentProjectionType\"]]\n</code></pre> <p>Get all the documents</p> <p>Arguments:</p> <ul> <li><code>skip</code>: Optional[int] - The number of documents to omit.</li> <li><code>limit</code>: Optional[int] - The maximum number of results to return.</li> <li><code>sort</code>: Union[None, str, List[Tuple[str, SortDirection]]] - A key or a list of (key, direction) pairs specifying the sort order for this query.</li> <li><code>projection_model</code>: Optional[Type[BaseModel]] - projection model</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for find operation (if Document class contains links, this parameter must fit the respective parameter of the aggregate MongoDB function)</li> </ul> <p>Returns:</p> <p>FindMany - query instance</p> <p></p>"},{"location":"api-documentation/interfaces/#findinterfaceall","title":"FindInterface.all","text":"<pre><code>@classmethod\ndef all(\n    cls: Type[FindType],\n    projection_model: Optional[Type[\"DocumentProjectionType\"]] = None,\n    skip: Optional[int] = None,\n    limit: Optional[int] = None,\n    sort: Union[None, str, List[Tuple[str, SortDirection]]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    with_children: bool = False,\n    lazy_parse: bool = False,\n    nesting_depth: Optional[int] = None,\n    nesting_depths_per_field: Optional[Dict[str, int]] = None,\n    **pymongo_kwargs: Any\n) -&gt; Union[FindMany[FindType], FindMany[\"DocumentProjectionType\"]]\n</code></pre> <p>the same as find_all</p> <p></p>"},{"location":"api-documentation/interfaces/#findinterfacecount","title":"FindInterface.count","text":"<pre><code>@classmethod\nasync def count(cls) -&gt; int\n</code></pre> <p>Number of documents in the collections</p> <p>The same as find_all().count()</p> <p>Returns:</p> <p>int</p> <p></p>"},{"location":"api-documentation/interfaces/#beanieodminterfacessetters","title":"beanie.odm.interfaces.setters","text":""},{"location":"api-documentation/interfaces/#settersinterface","title":"SettersInterface","text":"<pre><code>class SettersInterface()\n</code></pre>"},{"location":"api-documentation/interfaces/#settersinterfaceset_collection","title":"SettersInterface.set_collection","text":"<pre><code>@classmethod\ndef set_collection(cls, collection)\n</code></pre> <p>Collection setter</p> <p></p>"},{"location":"api-documentation/interfaces/#settersinterfaceset_database","title":"SettersInterface.set_database","text":"<pre><code>@classmethod\ndef set_database(cls, database)\n</code></pre> <p>Database setter</p> <p></p>"},{"location":"api-documentation/interfaces/#settersinterfaceset_collection_name","title":"SettersInterface.set_collection_name","text":"<pre><code>@classmethod\ndef set_collection_name(cls, name: str)\n</code></pre> <p>Collection name setter</p> <p></p>"},{"location":"api-documentation/interfaces/#beanieodminterfacesclone","title":"beanie.odm.interfaces.clone","text":""},{"location":"api-documentation/interfaces/#beanieodminterfacesaggregation_methods","title":"beanie.odm.interfaces.aggregation_methods","text":""},{"location":"api-documentation/interfaces/#aggregatemethods","title":"AggregateMethods","text":"<pre><code>class AggregateMethods()\n</code></pre> <p>Aggregate methods</p> <p></p>"},{"location":"api-documentation/interfaces/#aggregatemethodssum","title":"AggregateMethods.sum","text":"<pre><code>async def sum(field: Union[str, ExpressionField],\n              session: Optional[AsyncIOMotorClientSession] = None,\n              ignore_cache: bool = False) -&gt; Optional[float]\n</code></pre> <p>Sum of values of the given field</p> <p>Example:</p> <pre><code>class Sample(Document):\n    price: int\n    count: int\n\nsum_count = await Document.find(Sample.price &lt;= 100).sum(Sample.count)\n</code></pre> <p>Arguments:</p> <ul> <li><code>field</code>: Union[str, ExpressionField]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>ignore_cache</code>: bool</li> </ul> <p>Returns:</p> <p>float - sum. None if there are no items.</p> <p></p>"},{"location":"api-documentation/interfaces/#aggregatemethodsavg","title":"AggregateMethods.avg","text":"<pre><code>async def avg(field,\n              session: Optional[AsyncIOMotorClientSession] = None,\n              ignore_cache: bool = False) -&gt; Optional[float]\n</code></pre> <p>Average of values of the given field</p> <p>Example:</p> <pre><code>class Sample(Document):\n    price: int\n    count: int\n\navg_count = await Document.find(Sample.price &lt;= 100).avg(Sample.count)\n</code></pre> <p>Arguments:</p> <ul> <li><code>field</code>: Union[str, ExpressionField]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>ignore_cache</code>: bool</li> </ul> <p>Returns:</p> <p>Optional[float] - avg. None if there are no items.</p> <p></p>"},{"location":"api-documentation/interfaces/#aggregatemethodsmax","title":"AggregateMethods.max","text":"<pre><code>async def max(field: Union[str, ExpressionField],\n              session: Optional[AsyncIOMotorClientSession] = None,\n              ignore_cache: bool = False) -&gt; Optional[float]\n</code></pre> <p>Max of the values of the given field</p> <p>Example:</p> <pre><code>class Sample(Document):\n    price: int\n    count: int\n\nmax_count = await Document.find(Sample.price &lt;= 100).max(Sample.count)\n</code></pre> <p>Arguments:</p> <ul> <li><code>field</code>: Union[str, ExpressionField]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> </ul> <p>Returns:</p> <p>float - max. None if there are no items.</p> <p></p>"},{"location":"api-documentation/interfaces/#aggregatemethodsmin","title":"AggregateMethods.min","text":"<pre><code>async def min(field: Union[str, ExpressionField],\n              session: Optional[AsyncIOMotorClientSession] = None,\n              ignore_cache: bool = False) -&gt; Optional[float]\n</code></pre> <p>Min of the values of the given field</p> <p>Example:</p> <pre><code>class Sample(Document):\n    price: int\n    count: int\n\nmin_count = await Document.find(Sample.price &lt;= 100).min(Sample.count)\n</code></pre> <p>Arguments:</p> <ul> <li><code>field</code>: Union[str, ExpressionField]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> </ul> <p>Returns:</p> <p>float - min. None if there are no items.</p> <p></p>"},{"location":"api-documentation/interfaces/#beanieodminterfacesupdate","title":"beanie.odm.interfaces.update","text":""},{"location":"api-documentation/interfaces/#updatemethods","title":"UpdateMethods","text":"<pre><code>class UpdateMethods()\n</code></pre> <p>Update methods</p> <p></p>"},{"location":"api-documentation/interfaces/#updatemethodsset","title":"UpdateMethods.set","text":"<pre><code>def set(expression: Dict[Union[ExpressionField, str, Any], Any],\n        session: Optional[AsyncIOMotorClientSession] = None,\n        bulk_writer: Optional[BulkWriter] = None,\n        **kwargs: Any)\n</code></pre> <p>Set values</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nawait Document.find(Sample.one == 1).set({Sample.one: 100})\n</code></pre> <p>Uses Set operator</p> <p>Arguments:</p> <ul> <li><code>expression</code>: Dict[Union[ExpressionField, str, Any], Any] - keys and values to set</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>bulk_writer</code>: Optional[BulkWriter] - bulk writer</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/interfaces/#updatemethodscurrent_date","title":"UpdateMethods.current_date","text":"<pre><code>def current_date(expression: Dict[Union[datetime, ExpressionField, str], Any],\n                 session: Optional[AsyncIOMotorClientSession] = None,\n                 bulk_writer: Optional[BulkWriter] = None,\n                 **kwargs: Any)\n</code></pre> <p>Set current date</p> <p>Uses CurrentDate operator</p> <p>Arguments:</p> <ul> <li><code>expression</code>: Dict[Union[datetime, ExpressionField, str], Any]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>bulk_writer</code>: Optional[BulkWriter] - bulk writer</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/interfaces/#updatemethodsinc","title":"UpdateMethods.inc","text":"<pre><code>def inc(expression: Dict[Union[ExpressionField, float, int, str], Any],\n        session: Optional[AsyncIOMotorClientSession] = None,\n        bulk_writer: Optional[BulkWriter] = None,\n        **kwargs: Any)\n</code></pre> <p>Increment</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nawait Document.find(Sample.one == 1).inc({Sample.one: 100})\n</code></pre> <p>Uses Inc operator</p> <p>Arguments:</p> <ul> <li><code>expression</code>: Dict[Union[ExpressionField, float, int, str], Any]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>bulk_writer</code>: Optional[BulkWriter] - bulk writer</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/interfaces/#beanieodminterfacesinheritance","title":"beanie.odm.interfaces.inheritance","text":""},{"location":"api-documentation/interfaces/#beanieodminterfacessession","title":"beanie.odm.interfaces.session","text":""},{"location":"api-documentation/interfaces/#sessionmethods","title":"SessionMethods","text":"<pre><code>class SessionMethods()\n</code></pre> <p>Session methods</p> <p></p>"},{"location":"api-documentation/interfaces/#sessionmethodsset_session","title":"SessionMethods.set_session","text":"<pre><code>def set_session(session: Optional[AsyncIOMotorClientSession] = None)\n</code></pre> <p>Set motor session</p> <p>Arguments:</p> <ul> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> </ul> <p></p>"},{"location":"api-documentation/interfaces/#beanieodminterfacesaggregate","title":"beanie.odm.interfaces.aggregate","text":""},{"location":"api-documentation/interfaces/#aggregateinterface","title":"AggregateInterface","text":"<pre><code>class AggregateInterface()\n</code></pre>"},{"location":"api-documentation/interfaces/#aggregateinterfaceaggregate","title":"AggregateInterface.aggregate","text":"<pre><code>@classmethod\ndef aggregate(\n    cls: Type[DocType],\n    aggregation_pipeline: list,\n    projection_model: Optional[Type[DocumentProjectionType]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    **pymongo_kwargs: Any\n) -&gt; Union[\n        AggregationQuery[Dict[str, Any]],\n        AggregationQuery[DocumentProjectionType],\n]\n</code></pre> <p>Aggregate over collection.</p> <p>Returns AggregationQuery query object</p> <p>Arguments:</p> <ul> <li><code>aggregation_pipeline</code>: list - aggregation pipeline</li> <li><code>projection_model</code>: Type[BaseModel]</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>ignore_cache</code>: bool</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for aggregate operation</li> </ul> <p>Returns:</p> <p>AggregationQuery</p> <p></p>"},{"location":"api-documentation/interfaces/#beanieodminterfacesdetector","title":"beanie.odm.interfaces.detector","text":""},{"location":"api-documentation/interfaces/#beanieodminterfacesgetters","title":"beanie.odm.interfaces.getters","text":""},{"location":"api-documentation/query/","title":"Query","text":""},{"location":"api-documentation/query/#beanieodmqueriesfind","title":"beanie.odm.queries.find","text":""},{"location":"api-documentation/query/#findquery","title":"FindQuery","text":"<pre><code>class FindQuery(Generic[FindQueryResultType], UpdateMethods, SessionMethods,\n                CloneInterface)\n</code></pre> <p>Find Query base class</p> <p></p>"},{"location":"api-documentation/query/#findqueryget_filter_query","title":"FindQuery.get_filter_query","text":"<pre><code>def get_filter_query() -&gt; Mapping[str, Any]\n</code></pre> <p>Returns: MongoDB filter query</p> <p></p>"},{"location":"api-documentation/query/#findquerydelete","title":"FindQuery.delete","text":"<pre><code>def delete(session: Optional[AsyncIOMotorClientSession] = None,\n           bulk_writer: Optional[BulkWriter] = None,\n           **pymongo_kwargs: Any) -&gt; Union[DeleteOne, DeleteMany]\n</code></pre> <p>Provide search criteria to the Delete query</p> <p>Arguments:</p> <ul> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> </ul> <p>Returns:</p> <p>Union[DeleteOne, DeleteMany]</p> <p></p>"},{"location":"api-documentation/query/#findqueryproject","title":"FindQuery.project","text":"<pre><code>def project(projection_model)\n</code></pre> <p>Apply projection parameter</p> <p>Arguments:</p> <ul> <li><code>projection_model</code>: Optional[Type[BaseModel]] - projection model</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/query/#findquerycount","title":"FindQuery.count","text":"<pre><code>async def count() -&gt; int\n</code></pre> <p>Number of found documents</p> <p>Returns:</p> <p>int</p> <p></p>"},{"location":"api-documentation/query/#findqueryexists","title":"FindQuery.exists","text":"<pre><code>async def exists() -&gt; bool\n</code></pre> <p>If find query will return anything</p> <p>Returns:</p> <p>bool</p> <p></p>"},{"location":"api-documentation/query/#findmany","title":"FindMany","text":"<pre><code>class FindMany(FindQuery[FindQueryResultType],\n               BaseCursorQuery[FindQueryResultType], AggregateMethods)\n</code></pre> <p>Find Many query class</p> <p></p>"},{"location":"api-documentation/query/#findmanyfind_many","title":"FindMany.find_many","text":"<pre><code>def find_many(\n    *args: Union[Mapping[str, Any], bool],\n    projection_model: Optional[Type[FindQueryProjectionType]] = None,\n    skip: Optional[int] = None,\n    limit: Optional[int] = None,\n    sort: Union[None, str, List[Tuple[str, SortDirection]]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    fetch_links: bool = False,\n    lazy_parse: bool = False,\n    nesting_depth: Optional[int] = None,\n    nesting_depths_per_field: Optional[Dict[str, int]] = None,\n    **pymongo_kwargs: Any\n) -&gt; Union[\"FindMany[FindQueryResultType]\",\n           \"FindMany[FindQueryProjectionType]\"]\n</code></pre> <p>Find many documents by criteria</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str, Any] - search criteria</li> <li><code>skip</code>: Optional[int] - The number of documents to omit.</li> <li><code>limit</code>: Optional[int] - The maximum number of results to return.</li> <li><code>sort</code>: Union[None, str, List[Tuple[str, SortDirection]]] - A key or a list of (key, direction) pairs specifying the sort order for this query.</li> <li><code>projection_model</code>: Optional[Type[BaseModel]] - projection model</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>ignore_cache</code>: bool</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for find operation (if Document class contains links, this parameter must fit the respective parameter of the aggregate MongoDB function)</li> </ul> <p>Returns:</p> <p>FindMany - query instance</p> <p></p>"},{"location":"api-documentation/query/#findmanyproject","title":"FindMany.project","text":"<pre><code>def project(\n    projection_model: Optional[Type[FindQueryProjectionType]]\n) -&gt; Union[\"FindMany[FindQueryResultType]\",\n           \"FindMany[FindQueryProjectionType]\"]\n</code></pre> <p>Apply projection parameter</p> <p>Arguments:</p> <ul> <li><code>projection_model</code>: Optional[Type[BaseModel]] - projection model</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/query/#findmanyfind","title":"FindMany.find","text":"<pre><code>def find(\n    *args: Union[Mapping[str, Any], bool],\n    projection_model: Optional[Type[FindQueryProjectionType]] = None,\n    skip: Optional[int] = None,\n    limit: Optional[int] = None,\n    sort: Union[None, str, List[Tuple[str, SortDirection]]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    fetch_links: bool = False,\n    lazy_parse: bool = False,\n    nesting_depth: Optional[int] = None,\n    nesting_depths_per_field: Optional[Dict[str, int]] = None,\n    **pymongo_kwargs: Any\n) -&gt; Union[\"FindMany[FindQueryResultType]\",\n           \"FindMany[FindQueryProjectionType]\"]\n</code></pre> <p>The same as <code>find_many(...)</code></p> <p></p>"},{"location":"api-documentation/query/#findmanysort","title":"FindMany.sort","text":"<pre><code>def sort(\n    *args: Optional[Union[str, Tuple[str, SortDirection],\n                          List[Tuple[str, SortDirection]]]]\n) -&gt; \"FindMany[FindQueryResultType]\"\n</code></pre> <p>Add sort parameters</p> <p>Arguments:</p> <ul> <li><code>args</code>: Union[str, Tuple[str, SortDirection], List[Tuple[str, SortDirection]]] - A key or a tuple (key, direction) or a list of (key, direction) pairs specifying the sort order for this query.</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/query/#findmanyskip","title":"FindMany.skip","text":"<pre><code>def skip(n: Optional[int]) -&gt; \"FindMany[FindQueryResultType]\"\n</code></pre> <p>Set skip parameter</p> <p>Arguments:</p> <ul> <li><code>n</code>: int</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/query/#findmanylimit","title":"FindMany.limit","text":"<pre><code>def limit(n: Optional[int]) -&gt; \"FindMany[FindQueryResultType]\"\n</code></pre> <p>Set limit parameter</p> <p>Arguments:</p> <ul> <li><code>n</code>: int</li> </ul> <p></p>"},{"location":"api-documentation/query/#findmanyupdate","title":"FindMany.update","text":"<pre><code>def update(*args: Mapping[str, Any],\n           session: Optional[AsyncIOMotorClientSession] = None,\n           bulk_writer: Optional[BulkWriter] = None,\n           **pymongo_kwargs: Any)\n</code></pre> <p>Create Update with modifications query</p> <p>and provide search criteria there</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str,Any] - the modifications to apply.</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>bulk_writer</code>: Optional[BulkWriter]</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#findmanyupsert","title":"FindMany.upsert","text":"<pre><code>def upsert(*args: Mapping[str, Any],\n           on_insert: \"DocType\",\n           session: Optional[AsyncIOMotorClientSession] = None,\n           **pymongo_kwargs: Any)\n</code></pre> <p>Create Update with modifications query</p> <p>and provide search criteria there</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str,Any] - the modifications to apply.</li> <li><code>on_insert</code>: DocType - document to insert if there is no matched document in the collection</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#findmanyupdate_many","title":"FindMany.update_many","text":"<pre><code>def update_many(*args: Mapping[str, Any],\n                session: Optional[AsyncIOMotorClientSession] = None,\n                bulk_writer: Optional[BulkWriter] = None,\n                **pymongo_kwargs: Any) -&gt; UpdateMany\n</code></pre> <p>Provide search criteria to the</p> <p>UpdateMany query</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str,Any] - the modifications to apply.</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#findmanydelete_many","title":"FindMany.delete_many","text":"<pre><code>def delete_many(session: Optional[AsyncIOMotorClientSession] = None,\n                bulk_writer: Optional[BulkWriter] = None,\n                **pymongo_kwargs: Any) -&gt; DeleteMany\n</code></pre> <p>Provide search criteria to the DeleteMany query</p> <p>Arguments:</p> <ul> <li><code>session</code>: </li> </ul> <p>Returns:</p> <p>DeleteMany query</p> <p></p>"},{"location":"api-documentation/query/#findmanyaggregate","title":"FindMany.aggregate","text":"<pre><code>def aggregate(\n    aggregation_pipeline: List[Any],\n    projection_model: Optional[Type[FindQueryProjectionType]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    **pymongo_kwargs: Any\n) -&gt; Union[\n        AggregationQuery[Dict[str, Any]],\n        AggregationQuery[FindQueryProjectionType],\n]\n</code></pre> <p>Provide search criteria to the AggregationQuery</p> <p>Arguments:</p> <ul> <li><code>aggregation_pipeline</code>: list - aggregation pipeline. MongoDB doc: https://docs.mongodb.com/manual/core/aggregation-pipeline/</li> <li><code>projection_model</code>: Type[BaseModel] - Projection Model</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - PyMongo session</li> <li><code>ignore_cache</code>: bool</li> </ul> <p>Returns:</p> <p>AggregationQuery</p> <p></p>"},{"location":"api-documentation/query/#findmanyfirst_or_none","title":"FindMany.first_or_none","text":"<pre><code>async def first_or_none() -&gt; Optional[FindQueryResultType]\n</code></pre> <p>Returns the first found element or None if no elements were found</p> <p></p>"},{"location":"api-documentation/query/#findmanycount","title":"FindMany.count","text":"<pre><code>async def count() -&gt; int\n</code></pre> <p>Number of found documents</p> <p>Returns:</p> <p>int</p> <p></p>"},{"location":"api-documentation/query/#findone","title":"FindOne","text":"<pre><code>class FindOne(FindQuery[FindQueryResultType])\n</code></pre> <p>Find One query class</p> <p></p>"},{"location":"api-documentation/query/#findoneproject","title":"FindOne.project","text":"<pre><code>def project(\n    projection_model: Optional[Type[FindQueryProjectionType]] = None\n) -&gt; Union[\"FindOne[FindQueryResultType]\", \"FindOne[FindQueryProjectionType]\"]\n</code></pre> <p>Apply projection parameter</p> <p>Arguments:</p> <ul> <li><code>projection_model</code>: Optional[Type[BaseModel]] - projection model</li> </ul> <p>Returns:</p> <p>self</p> <p></p>"},{"location":"api-documentation/query/#findonefind_one","title":"FindOne.find_one","text":"<pre><code>def find_one(\n    *args: Union[Mapping[str, Any], bool],\n    projection_model: Optional[Type[FindQueryProjectionType]] = None,\n    session: Optional[AsyncIOMotorClientSession] = None,\n    ignore_cache: bool = False,\n    fetch_links: bool = False,\n    nesting_depth: Optional[int] = None,\n    nesting_depths_per_field: Optional[Dict[str, int]] = None,\n    **pymongo_kwargs: Any\n) -&gt; Union[\"FindOne[FindQueryResultType]\", \"FindOne[FindQueryProjectionType]\"]\n</code></pre> <p>Find one document by criteria</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str, Any] - search criteria</li> <li><code>projection_model</code>: Optional[Type[BaseModel]] - projection model</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - motor session</li> <li><code>ignore_cache</code>: bool</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for find operation (if Document class contains links, this parameter must fit the respective parameter of the aggregate MongoDB function)</li> </ul> <p>Returns:</p> <p>FindOne - query instance</p> <p></p>"},{"location":"api-documentation/query/#findoneupdate","title":"FindOne.update","text":"<pre><code>def update(*args: Mapping[str, Any],\n           session: Optional[AsyncIOMotorClientSession] = None,\n           bulk_writer: Optional[BulkWriter] = None,\n           response_type: Optional[UpdateResponse] = None,\n           **pymongo_kwargs: Any)\n</code></pre> <p>Create Update with modifications query</p> <p>and provide search criteria there</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str,Any] - the modifications to apply.</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>bulk_writer</code>: Optional[BulkWriter]</li> <li><code>response_type</code>: Optional[UpdateResponse]</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#findoneupsert","title":"FindOne.upsert","text":"<pre><code>def upsert(*args: Mapping[str, Any],\n           on_insert: \"DocType\",\n           session: Optional[AsyncIOMotorClientSession] = None,\n           response_type: Optional[UpdateResponse] = None,\n           **pymongo_kwargs: Any)\n</code></pre> <p>Create Update with modifications query</p> <p>and provide search criteria there</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str,Any] - the modifications to apply.</li> <li><code>on_insert</code>: DocType - document to insert if there is no matched document in the collection</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>response_type</code>: Optional[UpdateResponse]</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#findoneupdate_one","title":"FindOne.update_one","text":"<pre><code>def update_one(*args: Mapping[str, Any],\n               session: Optional[AsyncIOMotorClientSession] = None,\n               bulk_writer: Optional[BulkWriter] = None,\n               response_type: Optional[UpdateResponse] = None,\n               **pymongo_kwargs: Any) -&gt; UpdateOne\n</code></pre> <p>Create UpdateOne query using modifications and</p> <p>provide search criteria there</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Mapping[str,Any] - the modifications to apply</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - PyMongo sessions</li> <li><code>response_type</code>: Optional[UpdateResponse]</li> </ul> <p>Returns:</p> <p>UpdateOne query</p> <p></p>"},{"location":"api-documentation/query/#findonedelete_one","title":"FindOne.delete_one","text":"<pre><code>def delete_one(session: Optional[AsyncIOMotorClientSession] = None,\n               bulk_writer: Optional[BulkWriter] = None,\n               **pymongo_kwargs: Any) -&gt; DeleteOne\n</code></pre> <p>Provide search criteria to the DeleteOne query</p> <p>Arguments:</p> <ul> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - PyMongo sessions</li> </ul> <p>Returns:</p> <p>DeleteOne query</p> <p></p>"},{"location":"api-documentation/query/#findonereplace_one","title":"FindOne.replace_one","text":"<pre><code>async def replace_one(\n        document: \"DocType\",\n        session: Optional[AsyncIOMotorClientSession] = None,\n        bulk_writer: Optional[BulkWriter] = None) -&gt; Optional[UpdateResult]\n</code></pre> <p>Replace found document by provided</p> <p>Arguments:</p> <ul> <li><code>document</code>: Document - document, which will replace the found one</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession] - PyMongo session</li> <li><code>bulk_writer</code>: Optional[BulkWriter] - Beanie bulk writer</li> </ul> <p>Returns:</p> <p>UpdateResult</p> <p></p>"},{"location":"api-documentation/query/#findone__await__","title":"FindOne.__await__","text":"<pre><code>def __await__() -&gt; Generator[Coroutine, Any, Optional[FindQueryResultType]]\n</code></pre> <p>Run the query</p> <p>Returns:</p> <p>BaseModel</p> <p></p>"},{"location":"api-documentation/query/#findonecount","title":"FindOne.count","text":"<pre><code>async def count() -&gt; int\n</code></pre> <p>Count the number of documents matching the query</p> <p>Returns:</p> <p>int</p> <p></p>"},{"location":"api-documentation/query/#beanieodmqueriesdelete","title":"beanie.odm.queries.delete","text":""},{"location":"api-documentation/query/#deletequery","title":"DeleteQuery","text":"<pre><code>class DeleteQuery(SessionMethods, CloneInterface)\n</code></pre> <p>Deletion Query</p> <p></p>"},{"location":"api-documentation/query/#deletemany","title":"DeleteMany","text":"<pre><code>class DeleteMany(DeleteQuery)\n</code></pre>"},{"location":"api-documentation/query/#deletemany__await__","title":"DeleteMany.__await__","text":"<pre><code>def __await__() -&gt; Generator[DeleteResult, None, Optional[DeleteResult]]\n</code></pre> <p>Run the query </p> <p></p>"},{"location":"api-documentation/query/#deleteone","title":"DeleteOne","text":"<pre><code>class DeleteOne(DeleteQuery)\n</code></pre>"},{"location":"api-documentation/query/#deleteone__await__","title":"DeleteOne.__await__","text":"<pre><code>def __await__() -&gt; Generator[DeleteResult, None, Optional[DeleteResult]]\n</code></pre> <p>Run the query </p> <p></p>"},{"location":"api-documentation/query/#beanieodmqueriescursor","title":"beanie.odm.queries.cursor","text":""},{"location":"api-documentation/query/#basecursorquery","title":"BaseCursorQuery","text":"<pre><code>class BaseCursorQuery(Generic[CursorResultType])\n</code></pre> <p>BaseCursorQuery class. Wrapper over AsyncIOMotorCursor, which parse result with model</p> <p></p>"},{"location":"api-documentation/query/#basecursorqueryto_list","title":"BaseCursorQuery.to_list","text":"<pre><code>async def to_list(length: Optional[int] = None) -&gt; List[CursorResultType]\n</code></pre> <p>Get list of documents</p> <p>Arguments:</p> <ul> <li><code>length</code>: Optional[int] - length of the list</li> </ul> <p>Returns:</p> <p>Union[List[BaseModel], List[Dict[str, Any]]]</p> <p></p>"},{"location":"api-documentation/query/#beanieodmqueriesupdate","title":"beanie.odm.queries.update","text":""},{"location":"api-documentation/query/#updateresponse","title":"UpdateResponse","text":"<pre><code>class UpdateResponse(str, Enum)\n</code></pre>"},{"location":"api-documentation/query/#updateresponseupdate_result","title":"UpdateResponse.UPDATE_RESULT","text":"<p>PyMongo update result</p> <p></p>"},{"location":"api-documentation/query/#updateresponseold_document","title":"UpdateResponse.OLD_DOCUMENT","text":"<p>Original document</p> <p></p>"},{"location":"api-documentation/query/#updateresponsenew_document","title":"UpdateResponse.NEW_DOCUMENT","text":"<p>Updated document</p> <p></p>"},{"location":"api-documentation/query/#updatequery","title":"UpdateQuery","text":"<pre><code>class UpdateQuery(UpdateMethods, SessionMethods, CloneInterface)\n</code></pre> <p>Update Query base class</p> <p></p>"},{"location":"api-documentation/query/#updatemany","title":"UpdateMany","text":"<pre><code>class UpdateMany(UpdateQuery)\n</code></pre> <p>Update Many query class</p> <p></p>"},{"location":"api-documentation/query/#updatemanyupdate","title":"UpdateMany.update","text":"<pre><code>def update(*args: Mapping[str, Any],\n           session: Optional[AsyncIOMotorClientSession] = None,\n           bulk_writer: Optional[BulkWriter] = None,\n           **pymongo_kwargs: Any) -&gt; \"UpdateQuery\"\n</code></pre> <p>Provide modifications to the update query.</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Union[dict, Mapping] - the modifications to apply.</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>bulk_writer</code>: Optional[BulkWriter]</li> <li><code>pymongo_kwargs</code>: pymongo native parameters for update operation</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#updatemanyupsert","title":"UpdateMany.upsert","text":"<pre><code>def upsert(*args: Mapping[str, Any],\n           on_insert: \"DocType\",\n           session: Optional[AsyncIOMotorClientSession] = None,\n           **pymongo_kwargs: Any) -&gt; \"UpdateQuery\"\n</code></pre> <p>Provide modifications to the upsert query.</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Union[dict, Mapping] - the modifications to apply.</li> <li><code>on_insert</code>: DocType - document to insert if there is no matched document in the collection</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>**pymongo_kwargs</code>: pymongo native parameters for update operation</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#updatemanyupdate_many","title":"UpdateMany.update_many","text":"<pre><code>def update_many(*args: Mapping[str, Any],\n                session: Optional[AsyncIOMotorClientSession] = None,\n                bulk_writer: Optional[BulkWriter] = None,\n                **pymongo_kwargs: Any)\n</code></pre> <p>Provide modifications to the update query</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Union[dict, Mapping] - the modifications to apply.</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> <li><code>pymongo_kwargs</code>: pymongo native parameters for update operation</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#updatemany__await__","title":"UpdateMany.__await__","text":"<pre><code>def __await__() -&gt; Generator[Any, None, Union[UpdateResult, InsertOneResult,\n                                              Optional[\"DocType\"]]]\n</code></pre> <p>Run the query </p> <p></p>"},{"location":"api-documentation/query/#updateone","title":"UpdateOne","text":"<pre><code>class UpdateOne(UpdateQuery)\n</code></pre> <p>Update One query class</p> <p></p>"},{"location":"api-documentation/query/#updateoneupdate","title":"UpdateOne.update","text":"<pre><code>def update(*args: Mapping[str, Any],\n           session: Optional[AsyncIOMotorClientSession] = None,\n           bulk_writer: Optional[BulkWriter] = None,\n           response_type: Optional[UpdateResponse] = None,\n           **pymongo_kwargs: Any) -&gt; \"UpdateQuery\"\n</code></pre> <p>Provide modifications to the update query.</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Union[dict, Mapping] - the modifications to apply.</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>bulk_writer</code>: Optional[BulkWriter]</li> <li><code>response_type</code>: UpdateResponse</li> <li><code>pymongo_kwargs</code>: pymongo native parameters for update operation</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#updateoneupsert","title":"UpdateOne.upsert","text":"<pre><code>def upsert(*args: Mapping[str, Any],\n           on_insert: \"DocType\",\n           session: Optional[AsyncIOMotorClientSession] = None,\n           response_type: Optional[UpdateResponse] = None,\n           **pymongo_kwargs: Any) -&gt; \"UpdateQuery\"\n</code></pre> <p>Provide modifications to the upsert query.</p> <p>Arguments:</p> <ul> <li><code>args</code>: *Union[dict, Mapping] - the modifications to apply.</li> <li><code>on_insert</code>: DocType - document to insert if there is no matched document in the collection</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>response_type</code>: Optional[UpdateResponse]</li> <li><code>pymongo_kwargs</code>: pymongo native parameters for update operation</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#updateoneupdate_one","title":"UpdateOne.update_one","text":"<pre><code>def update_one(*args: Mapping[str, Any],\n               session: Optional[AsyncIOMotorClientSession] = None,\n               bulk_writer: Optional[BulkWriter] = None,\n               response_type: Optional[UpdateResponse] = None,\n               **pymongo_kwargs: Any)\n</code></pre> <p>Provide modifications to the update query. The same as <code>update()</code></p> <p>Arguments:</p> <ul> <li><code>args</code>: *Union[dict, Mapping] - the modifications to apply.</li> <li><code>session</code>: Optional[AsyncIOMotorClientSession]</li> <li><code>bulk_writer</code>: \"BulkWriter\" - Beanie bulk writer</li> <li><code>response_type</code>: Optional[UpdateResponse]</li> <li><code>pymongo_kwargs</code>: pymongo native parameters for update operation</li> </ul> <p>Returns:</p> <p>UpdateMany query</p> <p></p>"},{"location":"api-documentation/query/#updateone__await__","title":"UpdateOne.__await__","text":"<pre><code>def __await__() -&gt; Generator[Any, None, Union[UpdateResult, InsertOneResult,\n                                              Optional[\"DocType\"]]]\n</code></pre> <p>Run the query </p> <p></p>"},{"location":"api-documentation/query/#beanieodmqueriesaggregation","title":"beanie.odm.queries.aggregation","text":""},{"location":"api-documentation/query/#aggregationquery","title":"AggregationQuery","text":"<pre><code>class AggregationQuery(Generic[AggregationProjectionType],\n                       BaseCursorQuery[AggregationProjectionType],\n                       SessionMethods, CloneInterface)\n</code></pre> <p>Aggregation Query</p>"},{"location":"api-documentation/operators/find/","title":"Find","text":""},{"location":"api-documentation/operators/find/#beanieodmoperatorsfindelement","title":"beanie.odm.operators.find.element","text":""},{"location":"api-documentation/operators/find/#exists","title":"Exists","text":"<pre><code>class Exists(BaseFindElementOperator)\n</code></pre> <p><code>$exists</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nExists(Product.price, True)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$exists\": True}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/exists/</p> <p></p>"},{"location":"api-documentation/operators/find/#type","title":"Type","text":"<pre><code>class Type(BaseFindElementOperator)\n</code></pre> <p><code>$type</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nType(Product.price, \"decimal\")\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$type\": \"decimal\"}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/type/</p> <p></p>"},{"location":"api-documentation/operators/find/#beanieodmoperatorsfindarray","title":"beanie.odm.operators.find.array","text":""},{"location":"api-documentation/operators/find/#all","title":"All","text":"<pre><code>class All(BaseFindArrayOperator)\n</code></pre> <p><code>$all</code> array query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    results: List[int]\n\nAll(Sample.results, [80, 85])\n</code></pre> <p>Will return query object like</p> <pre><code>{\"results\": {\"$all\": [80, 85]}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/all</p> <p></p>"},{"location":"api-documentation/operators/find/#elemmatch","title":"ElemMatch","text":"<pre><code>class ElemMatch(BaseFindArrayOperator)\n</code></pre> <p><code>$elemMatch</code> array query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    results: List[int]\n\nElemMatch(Sample.results, {\"$in\": [80, 85]})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"results\": {\"$elemMatch\": {\"$in\": [80, 85]}}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/elemMatch/</p> <p></p>"},{"location":"api-documentation/operators/find/#size","title":"Size","text":"<pre><code>class Size(BaseFindArrayOperator)\n</code></pre> <p><code>$size</code> array query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    results: List[int]\n\nSize(Sample.results, 2)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"results\": {\"$size\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/size/</p> <p></p>"},{"location":"api-documentation/operators/find/#beanieodmoperatorsfindcomparison","title":"beanie.odm.operators.find.comparison","text":""},{"location":"api-documentation/operators/find/#eq","title":"Eq","text":"<pre><code>class Eq(BaseFindComparisonOperator)\n</code></pre> <p><code>equal</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nEq(Product.price, 2)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": 2}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/eq/</p> <p></p>"},{"location":"api-documentation/operators/find/#gt","title":"GT","text":"<pre><code>class GT(BaseFindComparisonOperator)\n</code></pre> <p><code>$gt</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nGT(Product.price, 2)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$gt\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/gt/</p> <p></p>"},{"location":"api-documentation/operators/find/#gte","title":"GTE","text":"<pre><code>class GTE(BaseFindComparisonOperator)\n</code></pre> <p><code>$gte</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nGTE(Product.price, 2)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$gte\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/gte/</p> <p></p>"},{"location":"api-documentation/operators/find/#in","title":"In","text":"<pre><code>class In(BaseFindComparisonOperator)\n</code></pre> <p><code>$in</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nIn(Product.price, [2, 3, 4])\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$in\": [2, 3, 4]}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/in/</p> <p></p>"},{"location":"api-documentation/operators/find/#notin","title":"NotIn","text":"<pre><code>class NotIn(BaseFindComparisonOperator)\n</code></pre> <p><code>$nin</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nNotIn(Product.price, [2, 3, 4])\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$nin\": [2, 3, 4]}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/nin/</p> <p></p>"},{"location":"api-documentation/operators/find/#lt","title":"LT","text":"<pre><code>class LT(BaseFindComparisonOperator)\n</code></pre> <p><code>$lt</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nLT(Product.price, 2)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$lt\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/lt/</p> <p></p>"},{"location":"api-documentation/operators/find/#lte","title":"LTE","text":"<pre><code>class LTE(BaseFindComparisonOperator)\n</code></pre> <p><code>$lte</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nLTE(Product.price, 2)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$lte\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/lte/</p> <p></p>"},{"location":"api-documentation/operators/find/#ne","title":"NE","text":"<pre><code>class NE(BaseFindComparisonOperator)\n</code></pre> <p><code>$ne</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n\nNE(Product.price, 2)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"price\": {\"$ne\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/ne/</p> <p></p>"},{"location":"api-documentation/operators/find/#beanieodmoperatorsfindlogical","title":"beanie.odm.operators.find.logical","text":""},{"location":"api-documentation/operators/find/#or","title":"Or","text":"<pre><code>class Or(LogicalOperatorForListOfExpressions)\n</code></pre> <p><code>$or</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n    category: str\n\nOr(Product.price&lt;10, Product.category==\"Sweets\")\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$or\": [{\"price\": {\"$lt\": 10}}, {\"category\": \"Sweets\"}]}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/or/</p> <p></p>"},{"location":"api-documentation/operators/find/#and","title":"And","text":"<pre><code>class And(LogicalOperatorForListOfExpressions)\n</code></pre> <p><code>$and</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n    category: str\n\nAnd(Product.price&lt;10, Product.category==\"Sweets\")\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$and\": [{\"price\": {\"$lt\": 10}}, {\"category\": \"Sweets\"}]}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/and/</p> <p></p>"},{"location":"api-documentation/operators/find/#nor","title":"Nor","text":"<pre><code>class Nor(BaseFindLogicalOperator)\n</code></pre> <p><code>$nor</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n    category: str\n\nNor(Product.price&lt;10, Product.category==\"Sweets\")\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$nor\": [{\"price\": {\"$lt\": 10}}, {\"category\": \"Sweets\"}]}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/nor/</p> <p></p>"},{"location":"api-documentation/operators/find/#not","title":"Not","text":"<pre><code>class Not(BaseFindLogicalOperator)\n</code></pre> <p><code>$not</code> query operator</p> <p>Example:</p> <pre><code>class Product(Document):\n    price: float\n    category: str\n\nNot(Product.price&lt;10)\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$not\": {\"price\": {\"$lt\": 10}}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/not/</p> <p></p>"},{"location":"api-documentation/operators/find/#beanieodmoperatorsfindbitwise","title":"beanie.odm.operators.find.bitwise","text":""},{"location":"api-documentation/operators/find/#bitsallclear","title":"BitsAllClear","text":"<pre><code>class BitsAllClear(BaseFindBitwiseOperator)\n</code></pre> <p><code>$bitsAllClear</code> query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/query/bitsAllClear/</p> <p></p>"},{"location":"api-documentation/operators/find/#bitsallset","title":"BitsAllSet","text":"<pre><code>class BitsAllSet(BaseFindBitwiseOperator)\n</code></pre> <p><code>$bitsAllSet</code> query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/query/bitsAllSet/</p> <p></p>"},{"location":"api-documentation/operators/find/#bitsanyclear","title":"BitsAnyClear","text":"<pre><code>class BitsAnyClear(BaseFindBitwiseOperator)\n</code></pre> <p><code>$bitsAnyClear</code> query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/query/bitsAnyClear/</p> <p></p>"},{"location":"api-documentation/operators/find/#bitsanyset","title":"BitsAnySet","text":"<pre><code>class BitsAnySet(BaseFindBitwiseOperator)\n</code></pre> <p><code>$bitsAnySet</code> query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/query/bitsAnySet/</p> <p></p>"},{"location":"api-documentation/operators/find/#beanieodmoperatorsfindgeospatial","title":"beanie.odm.operators.find.geospatial","text":""},{"location":"api-documentation/operators/find/#geointersects","title":"GeoIntersects","text":"<pre><code>class GeoIntersects(BaseFindGeospatialOperator)\n</code></pre> <p><code>$geoIntersects</code> query operator</p> <p>Example:</p> <pre><code>class GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Collection:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nGeoIntersects(Place.geo, \"Polygon\", [[0,0], [1,1], [3,3]])\n</code></pre> <p>Will return query object like</p> <pre><code>{\n    \"geo\": {\n        \"$geoIntersects\": {\n            \"$geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[0,0], [1,1], [3,3]],\n            }\n        }\n    }\n}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/geoIntersects/</p> <p></p>"},{"location":"api-documentation/operators/find/#geowithin","title":"GeoWithin","text":"<pre><code>class GeoWithin(BaseFindGeospatialOperator)\n</code></pre> <p><code>$geoWithin</code> query operator</p> <p>Example:</p> <pre><code>class GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Collection:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nGeoWithin(Place.geo, \"Polygon\", [[0,0], [1,1], [3,3]])\n</code></pre> <p>Will return query object like</p> <pre><code>{\n    \"geo\": {\n        \"$geoWithin\": {\n            \"$geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[0,0], [1,1], [3,3]],\n            }\n        }\n    }\n}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/geoWithin/</p> <p></p>"},{"location":"api-documentation/operators/find/#box","title":"Box","text":"<pre><code>class Box(BaseFindGeospatialOperator)\n</code></pre> <p><code>$box</code> query operator</p> <p>Example:</p> <pre><code>class GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Collection:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nBox(Place.geo, lower_left=[10,12], upper_right=[15,20])\n</code></pre> <p>Will return query object like</p> <pre><code>{\n    \"geo\": {\n        \"$geoWithin\": {\n            \"$box\": [[10, 12], [15, 20]]\n        }\n    }\n}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/box/</p> <p></p>"},{"location":"api-documentation/operators/find/#near","title":"Near","text":"<pre><code>class Near(BaseFindGeospatialOperator)\n</code></pre> <p><code>$near</code> query operator</p> <p>Example:</p> <pre><code>class GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Collection:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nNear(Place.geo, 1.2345, 2.3456, min_distance=500)\n</code></pre> <p>Will return query object like</p> <pre><code>{\n    \"geo\": {\n        \"$near\": {\n            \"$geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [1.2345, 2.3456],\n            },\n            \"$maxDistance\": 500,\n        }\n    }\n}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/near/</p> <p></p>"},{"location":"api-documentation/operators/find/#nearsphere","title":"NearSphere","text":"<pre><code>class NearSphere(Near)\n</code></pre> <p><code>$nearSphere</code> query operator</p> <p>Example:</p> <pre><code>class GeoObject(BaseModel):\n    type: str = \"Point\"\n    coordinates: Tuple[float, float]\n\nclass Place(Document):\n    geo: GeoObject\n\n    class Collection:\n        name = \"places\"\n        indexes = [\n            [(\"geo\", pymongo.GEOSPHERE)],  # GEO index\n        ]\n\nNearSphere(Place.geo, 1.2345, 2.3456, min_distance=500)\n</code></pre> <p>Will return query object like</p> <pre><code>{\n    \"geo\": {\n        \"$nearSphere\": {\n            \"$geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [1.2345, 2.3456],\n            },\n            \"$maxDistance\": 500,\n        }\n    }\n}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/nearSphere/</p> <p></p>"},{"location":"api-documentation/operators/find/#beanieodmoperatorsfindevaluation","title":"beanie.odm.operators.find.evaluation","text":""},{"location":"api-documentation/operators/find/#expr","title":"Expr","text":"<pre><code>class Expr(BaseFindEvaluationOperator)\n</code></pre> <p><code>$type</code> query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n    two: int\n\nExpr({\"$gt\": [ \"$one\" , \"$two\" ]})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$expr\": {\"$gt\": [ \"$one\" , \"$two\" ]}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/expr/</p> <p></p>"},{"location":"api-documentation/operators/find/#jsonschema","title":"JsonSchema","text":"<pre><code>class JsonSchema(BaseFindEvaluationOperator)\n</code></pre> <p><code>$jsonSchema</code> query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/query/jsonSchema/</p> <p></p>"},{"location":"api-documentation/operators/find/#mod","title":"Mod","text":"<pre><code>class Mod(BaseFindEvaluationOperator)\n</code></pre> <p><code>$mod</code> query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nMod(Sample.one, 4, 0)\n</code></pre> <p>Will return query object like</p> <pre><code>{ \"one\": { \"$mod\": [ 4, 0 ] } }\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/mod/</p> <p></p>"},{"location":"api-documentation/operators/find/#regex","title":"RegEx","text":"<pre><code>class RegEx(BaseFindEvaluationOperator)\n</code></pre> <p><code>$regex</code> query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/query/regex/</p> <p></p>"},{"location":"api-documentation/operators/find/#text","title":"Text","text":"<pre><code>class Text(BaseFindEvaluationOperator)\n</code></pre> <p><code>$text</code> query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    description: Indexed(str, pymongo.TEXT)\n\nText(\"coffee\")\n</code></pre> <p>Will return query object like</p> <pre><code>{\n    \"$text\": {\n        \"$search\": \"coffee\" ,\n        \"$caseSensitive\": False,\n        \"$diacriticSensitive\": False\n    }\n}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/query/text/</p> <ul> <li><code>Note</code> - if you need to run a query against Azure Cosmos DB for MongoDB,   which does not support diacritic sensitivity yet, you can set   <code>diacritic_sensitive</code> argument to <code>None</code> to exclude it from the query.</li> </ul> <p></p>"},{"location":"api-documentation/operators/find/#text__init__","title":"Text.__init__","text":"<pre><code>def __init__(search: str,\n             language: Optional[str] = None,\n             case_sensitive: bool = False,\n             diacritic_sensitive: Optional[bool] = False)\n</code></pre> <p>Arguments:</p> <ul> <li><code>search</code>: str</li> <li><code>language</code>: Optional[str] = None</li> <li><code>case_sensitive</code>: bool = False</li> <li><code>diacritic_sensitive</code>: Optional[bool] = False</li> </ul> <p></p>"},{"location":"api-documentation/operators/find/#where","title":"Where","text":"<pre><code>class Where(BaseFindEvaluationOperator)\n</code></pre> <p><code>$where</code> query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/query/where/</p>"},{"location":"api-documentation/operators/update/","title":"Update","text":""},{"location":"api-documentation/operators/update/#beanieodmoperatorsupdatearray","title":"beanie.odm.operators.update.array","text":""},{"location":"api-documentation/operators/update/#addtoset","title":"AddToSet","text":"<pre><code>class AddToSet(BaseUpdateArrayOperator)\n</code></pre> <p><code>$addToSet</code> update array query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    results: List[int]\n\nAddToSet({Sample.results: 2})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$addToSet\": {\"results\": 2}}\n</code></pre> <p>MongoDB docs:   https://docs.mongodb.com/manual/reference/operator/update/addToSet/</p> <p></p>"},{"location":"api-documentation/operators/update/#pop","title":"Pop","text":"<pre><code>class Pop(BaseUpdateArrayOperator)\n</code></pre> <p><code>$pop</code> update array query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    results: List[int]\n\nPop({Sample.results: 2})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$pop\": {\"results\": -1}}\n</code></pre> <p>MongoDB docs:   https://docs.mongodb.com/manual/reference/operator/update/pop/</p> <p></p>"},{"location":"api-documentation/operators/update/#pull","title":"Pull","text":"<pre><code>class Pull(BaseUpdateArrayOperator)\n</code></pre> <p><code>$pull</code> update array query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    results: List[int]\n\nPull(In(Sample.result: [1,2,3,4,5])\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$pull\": { \"results\": { $in: [1,2,3,4,5] }}}\n</code></pre> <p>MongoDB docs:   https://docs.mongodb.com/manual/reference/operator/update/pull/</p> <p></p>"},{"location":"api-documentation/operators/update/#push","title":"Push","text":"<pre><code>class Push(BaseUpdateArrayOperator)\n</code></pre> <p><code>$push</code> update array query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    results: List[int]\n\nPush({Sample.results: 1})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$push\": { \"results\": 1}}\n</code></pre> <p>MongoDB docs:   https://docs.mongodb.com/manual/reference/operator/update/push/</p> <p></p>"},{"location":"api-documentation/operators/update/#pullall","title":"PullAll","text":"<pre><code>class PullAll(BaseUpdateArrayOperator)\n</code></pre> <p><code>$pullAll</code> update array query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    results: List[int]\n\nPullAll({ Sample.results: [ 0, 5 ] })\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$pullAll\": { \"results\": [ 0, 5 ] }}\n</code></pre> <p>MongoDB docs:   https://docs.mongodb.com/manual/reference/operator/update/pullAll/</p> <p></p>"},{"location":"api-documentation/operators/update/#beanieodmoperatorsupdategeneral","title":"beanie.odm.operators.update.general","text":""},{"location":"api-documentation/operators/update/#set","title":"Set","text":"<pre><code>class Set(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$set</code> update query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nSet({Sample.one: 2})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$set\": {\"one\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/update/set/</p> <p></p>"},{"location":"api-documentation/operators/update/#setrevisionid","title":"SetRevisionId","text":"<pre><code>class SetRevisionId()\n</code></pre> <p><code>$set</code> update query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nSet({Sample.one: 2})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$set\": {\"one\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/update/set/</p> <p></p>"},{"location":"api-documentation/operators/update/#currentdate","title":"CurrentDate","text":"<pre><code>class CurrentDate(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$currentDate</code> update query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    ts: datetime\n\nCurrentDate({Sample.ts: True})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$currentDate\": {\"ts\": True}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/update/currentDate/</p> <p></p>"},{"location":"api-documentation/operators/update/#inc","title":"Inc","text":"<pre><code>class Inc(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$inc</code> update query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nInc({Sample.one: 2})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$inc\": {\"one\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/update/inc/</p> <p></p>"},{"location":"api-documentation/operators/update/#min","title":"Min","text":"<pre><code>class Min(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$min</code> update query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nMin({Sample.one: 2})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$min\": {\"one\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/update/min/</p> <p></p>"},{"location":"api-documentation/operators/update/#max","title":"Max","text":"<pre><code>class Max(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$max</code> update query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nMax({Sample.one: 2})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$max\": {\"one\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/update/max/</p> <p></p>"},{"location":"api-documentation/operators/update/#mul","title":"Mul","text":"<pre><code>class Mul(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$mul</code> update query operator</p> <p>Example:</p> <pre><code>class Sample(Document):\n    one: int\n\nMul({Sample.one: 2})\n</code></pre> <p>Will return query object like</p> <pre><code>{\"$mul\": {\"one\": 2}}\n</code></pre> <p>MongoDB doc:   https://docs.mongodb.com/manual/reference/operator/update/mul/</p> <p></p>"},{"location":"api-documentation/operators/update/#rename","title":"Rename","text":"<pre><code>class Rename(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$rename</code> update query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/update/rename/</p> <p></p>"},{"location":"api-documentation/operators/update/#setoninsert","title":"SetOnInsert","text":"<pre><code>class SetOnInsert(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$setOnInsert</code> update query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/update/setOnInsert/</p> <p></p>"},{"location":"api-documentation/operators/update/#unset","title":"Unset","text":"<pre><code>class Unset(BaseUpdateGeneralOperator)\n</code></pre> <p><code>$unset</code> update query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/update/unset/</p> <p></p>"},{"location":"api-documentation/operators/update/#beanieodmoperatorsupdatebitwise","title":"beanie.odm.operators.update.bitwise","text":""},{"location":"api-documentation/operators/update/#bit","title":"Bit","text":"<pre><code>class Bit(BaseUpdateBitwiseOperator)\n</code></pre> <p><code>$bit</code> update query operator</p> <p>MongoDB doc: https://docs.mongodb.com/manual/reference/operator/update/bit/</p>"},{"location":"batteries/queue/","title":"Task Queue","text":"<p>Task Queue is an advanced queue system for Beanie (MongoDB), designed to efficiently manage and process tasks. It features task priorities, states, dependencies, and automatic expiration. Different task queues can be processed together using the Worker class. Multiple workers can be run in separate processes using the Runner class.</p>"},{"location":"batteries/queue/#example","title":"Example","text":"<pre><code>from beanie_batteries_queue import Task, Runner\n\nclass ExampleTask(Task):\n    data: str\n\n    async def run(self):\n        self.data = self.data.upper()\n        await self.save()\n\nrunner = Runner(task_classes=[ExampleTask])\nrunner.start()\n</code></pre>"},{"location":"batteries/queue/#installation","title":"Installation","text":"<pre><code>pip install beanie[queue]\n</code></pre>"},{"location":"batteries/queue/#task","title":"Task","text":""},{"location":"batteries/queue/#declare-a-task-class","title":"Declare a task class","text":"<pre><code>from beanie_batteries_queue import Task\n\n\nclass SimpleTask(Task):\n    s: str\n</code></pre>"},{"location":"batteries/queue/#process-a-task","title":"Process a task","text":"<pre><code>from beanie_batteries_queue import State\n\n# Producer\ntask = SimpleTask(s=\"test\")\nawait task.push()\n\n# Consumer\nasync for task in SimpleTask.queue():\n    assert task.s == \"test\"\n    # Do some work\n    await task.finish()\n    break\n\n# Check that the task is finished\ntask = await SimpleTask.find_one({\"s\": \"test\"})\nassert task.state == State.FINISHED\n</code></pre> <p>Async generator <code>SimpleTask.queue()</code> will return all unfinished tasks in the order they were created or based on the priority if it was specified. It is an infinite loop, so you can use <code>break</code> to stop it.</p> <p>You can also use <code>SimpleTask.pop()</code> to get the next task from the queue.</p> <pre><code>from beanie_batteries_queue import State\n\n# Producer\ntask = SimpleTask(s=\"test\")\nawait task.push()\n\n# Consumer\ntask = await SimpleTask.pop()\nassert task.s == \"test\"\n# Do some work\nawait task.finish()\n</code></pre>"},{"location":"batteries/queue/#task-priority","title":"Task priority","text":"<p>There are three priority levels: <code>LOW</code>, <code>MEDIUM</code>, and <code>HIGH</code>. The default priority is <code>MEDIUM</code>. Tasks are popped from the queue in the following order: <code>HIGH</code>, <code>MEDIUM</code>, <code>LOW</code>.</p> <pre><code>from beanie_batteries_queue import Priority\n\ntask1 = SimpleTask(s=\"test1\", priority=Priority.LOW)\nawait task1.push()\ntask2 = SimpleTask(s=\"test2\", priority=Priority.HIGH)\nawait task2.push()\n\nasync for task in SimpleTask.queue():\n    assert task.s == \"test2\"\n    await task.finish()\n    break\n</code></pre>"},{"location":"batteries/queue/#task-state","title":"Task state","text":"<p>There are four states: <code>CREATED</code>, <code>RUNNING</code>, <code>FINISHED</code>, and <code>FAILED</code>. The default state is <code>PENDING</code>. When a task is pushed, it is in the <code>CREATED</code> state. When it gets popped from the queue, it is in the <code>RUNNING</code> state. <code>FINISHED</code> and <code>FAILED</code> states should be set manually.</p> <p>Finished:</p> <pre><code>from beanie_batteries_queue import State\n\ntask = SimpleTask(s=\"test\")\nawait task.push()\n\nasync for task in SimpleTask.queue():\n    assert task.state == State.RUNNING\n    await task.finish()\n    break\n\ntask = await SimpleTask.find_one({\"s\": \"test\"})\nassert task.state == State.FINISHED\n</code></pre> <p>Failed:</p> <pre><code>from beanie_batteries_queue import State\n\ntask = SimpleTask(s=\"test\")\nawait task.push()\n\nasync for task in SimpleTask.queue():\n    assert task.state == State.RUNNING\n    await task.fail()\n    break\n\ntask = await SimpleTask.find_one({\"s\": \"test\"})\nassert task.state == State.FAILED\n</code></pre>"},{"location":"batteries/queue/#task-dependencies","title":"Task dependencies","text":"<p>You can specify that a task depends on another task. In this case, the task will be popped from the queue only when all its dependencies have finished.</p> <pre><code>from beanie_batteries_queue import Task, DependencyType\nfrom beanie_batteries_queue import Link\nfrom pydantic import Field\n\n\nclass SimpleTask(Task):\n    s: str\n\n\nclass TaskWithDirectDependency(Task):\n    s: str\n    direct_dependency: Link[SimpleTask] = Field(\n        dependency_type=DependencyType.DIRECT\n    )\n</code></pre> <pre><code>from beanie_batteries_queue import State\n\ntask1 = SimpleTask(s=\"test1\")\nawait task1.push()\n\ntask2 = TaskWithDirectDependency(s=\"test2\", direct_dependency=task1)\nawait task2.push()\n\ntask_from_queue = await TaskWithDirectDependency.pop()\nassert task_from_queue is None\n# task2 is not popped from the queue because task1 is not finished yet\n\nawait task1.finish()\n\ntask_from_queue = await TaskWithDirectDependency.pop()\nassert task_from_queue is not None\n# task2 is popped from the queue because task1 is finished\n</code></pre>"},{"location":"batteries/queue/#task-dependencies-with-multiple-links","title":"Task dependencies with multiple links","text":"<p>You can specify that a task depends on multiple tasks. In this case, the task will be popped from the queue when all or any its dependencies are finished. It is controlled by the <code>dependency_type</code> parameter.</p> <p>All</p> <pre><code>class TaskWithMultipleDependencies(Task):\n    s: str\n    list_of_dependencies: Link[SimpleTask] = Field(\n        dependency_type=DependencyType.ALL_OF\n    )\n</code></pre> <p>Any</p> <pre><code>class TaskWithMultipleDependencies(Task):\n    s: str\n    list_of_dependencies: Link[SimpleTask] = Field(\n        dependency_type=DependencyType.ANY_OF\n    )\n</code></pre> <p>Tasks can have multiple links with different dependency types.</p> <pre><code>class TaskWithMultipleDependencies(Task):\n    s: str\n    list_of_dependencies_all: Link[SimpleTask] = Field(\n        dependency_type=DependencyType.ALL_OF\n    )\n    list_of_dependencies_any: Link[SimpleTask] = Field(\n        dependency_type=DependencyType.ANY_OF\n    )\n    direct_dependency: Link[SimpleTask] = Field(\n        dependency_type=DependencyType.DIRECT\n    )\n</code></pre>"},{"location":"batteries/queue/#expire-time","title":"Expire time","text":"<p>You can specify the time after which the task will be removed from the queue, even if it is not finished or has failed. This is controlled by the <code>expireAfterSeconds</code> index, which is set to 24 hours by default.</p> <pre><code>from pymongo import ASCENDING\nfrom beanie_batteries_queue import Task\n\n\nclass TaskWithExpireTime(Task):\n    s: str\n\n    class Settings:\n        indexes = [\n            # Other indexes,\n\n            # Expire after 5 minutes\n            [(\"created_at\", ASCENDING), (\"expireAfterSeconds\", 300)],\n        ]\n</code></pre> <p>Finished or failed tasks are not immediately removed from the queue. They are removed after the expiration time. You can manually delete them using the <code>delete()</code> method.</p>"},{"location":"batteries/queue/#queue","title":"Queue","text":"<p>Queues are designed to manage tasks. It will handle all the logic of creating, updating, and deleting tasks. Task logic should be defined in the <code>run</code> method of the task</p> <pre><code>from beanie_batteries_queue import Task\n\n\nclass ProcessTask(Task):\n    data: str\n\n    async def run(self):\n        # Implement the logic for processing the task\n        print(f\"Processing task with data: {self.data}\")\n        self.data = self.data.upper()\n        await self.save()\n</code></pre> <p>Now we can start the queue and it will process all the tasks. Be aware - it will run infinite loop. If you want to have another logic after starting the queue, you should run it with <code>asyncio.create_task()</code>.</p> <pre><code>queue = ProcessTask.queue()\nawait queue.start()\n</code></pre>"},{"location":"batteries/queue/#stop-the-queue","title":"Stop the queue","text":"<p>You can stop the queue by calling the <code>stop()</code> method.</p> <pre><code>await queue.stop()\n</code></pre>"},{"location":"batteries/queue/#queue-settings","title":"Queue settings","text":"<p>You can specify how frequently the queue will check for new tasks. The default value is 1 second.</p> <pre><code>queue = ProcessTask.queue(sleep_time=60)  # 60 seconds\nawait queue.start()\n</code></pre>"},{"location":"batteries/queue/#worker","title":"Worker","text":"<p>Queue can handle only one task model. To process multiple task models, you should use Worker. It will run multiple queues</p> <pre><code>from beanie_batteries_queue import Task, Worker\n\nclass ProcessTask(Task):\n    data: str\n\n    async def run(self):\n        self.data = self.data.upper()\n        await self.save()\n\nclass AnotherTask(Task):\n    data: str\n\n    async def run(self):\n        self.data = self.data.upper()\n        await self.save()\n\n\nworker = Worker(task_classes=[ProcessTask, AnotherTask])\nawait worker.start()\n</code></pre> <p>Be aware - it will run infinite loop. If you want to have another logic after starting the worker, you should run it with <code>asyncio.create_task()</code>.</p>"},{"location":"batteries/queue/#stop-the-worker","title":"Stop the worker","text":"<p>You can stop the worker by calling the <code>stop()</code> method.</p> <pre><code>await worker.stop()\n</code></pre>"},{"location":"batteries/queue/#worker-settings","title":"Worker settings","text":"<p>You can specify how frequently the worker will check for new tasks. The default value is 1 second.</p> <pre><code>worker = Worker(task_classes=[ProcessTask, AnotherTask], sleep_time=60)  # 60 seconds\nawait worker.start()\n</code></pre>"},{"location":"batteries/queue/#runner","title":"Runner","text":"<p>Runner is a class that allows you to run multiple workers in separate processes. It is useful when your tasks are CPU intensive and you want to use all the cores of your CPU.</p> <pre><code>from beanie_batteries_queue import Task, Runner\n\nclass ProcessTask(Task):\n    data: str\n\n    async def run(self):\n        self.data = self.data.upper()\n        await self.save()\n\nclass AnotherTask(Task):\n    data: str\n\n    async def run(self):\n        self.data = self.data.upper()\n        await self.save()\n\nrunner = Runner(task_classes=[ProcessTask, AnotherTask])\nrunner.start()\n</code></pre>"},{"location":"batteries/queue/#stop-the-runner","title":"Stop the runner","text":"<p>You can stop the runner by calling the <code>stop()</code> method.</p> <pre><code>runner.stop()\n</code></pre>"},{"location":"batteries/queue/#runner-settings","title":"Runner settings","text":"<p>You can specify how many workers will be run. The default value is 1.</p> <pre><code>runner = Runner(task_classes=[ProcessTask, AnotherTask], workers_count=4)\nrunner.start()\n</code></pre> <p>You can specify how frequently the worker will check for new tasks. The default value is 1 second.</p> <pre><code>runner = Runner(task_classes=[ProcessTask, AnotherTask], sleep_time=60)  # 60 seconds\nrunner.start()\n</code></pre> <p>You can specify if the start method should run while the workers are alive or if it should return immediately. The default value is True.</p> <pre><code>runner = Runner(task_classes=[ProcessTask, AnotherTask], run_indefinitely=False)\nrunner.start()\n</code></pre>"},{"location":"tutorial/aggregation/","title":"Aggregations","text":"<p>You can perform aggregation queries through beanie as well. For example, to calculate the average:</p> <pre><code># With a search:\navg_price = await Product.find(\n    Product.category.name == \"Chocolate\"\n).avg(Product.price)\n\n# Over the whole collection:\navg_price = await Product.avg(Product.price)\n</code></pre> <p>A full list of available methods can be found here.</p> <p>You can also use the native PyMongo syntax by calling the <code>aggregate</code> method.  However, as Beanie will not know what output to expect, you will have to supply a projection model yourself.  If you do not supply a projection model, then a dictionary will be returned.</p> <pre><code>class OutputItem(BaseModel):\n    id: str = Field(None, alias=\"_id\")\n    total: float\n\n\nresult = await Product.find(\n    Product.category.name == \"Chocolate\").aggregate(\n    [{\"$group\": {\"_id\": \"$category.name\", \"total\": {\"$avg\": \"$price\"}}}],\n    projection_model=OutputItem\n).to_list()\n</code></pre>"},{"location":"tutorial/cache/","title":"Cache","text":"<p>All query results could be locally cached.</p> <p>This feature must be explicitly turned on in the <code>Settings</code> inner class.</p> <pre><code>class Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_cache = True\n</code></pre> <p>Beanie uses LRU cache with expiration time.  You can set <code>capacity</code> (the maximum number of the cached queries) and expiration time in the <code>Settings</code> inner class.</p> <pre><code>class Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_cache = True\n        cache_expiration_time = datetime.timedelta(seconds=10)\n        cache_capacity = 5\n</code></pre> <p>Any query will be cached for this document class.</p> <pre><code># on the first call it will go to the database\nsamples = await Sample.find(num&gt;10).to_list()\n\n# on the second - it will use cache instead\nsamples = await Sample.find(num&gt;10).to_list()\n\nawait asyncio.sleep(15)\n\n# if the expiration time was reached it will go to the database again\nsamples = await Sample.find(num&gt;10).to_list()\n</code></pre>"},{"location":"tutorial/defining-a-document/","title":"Defining a document","text":"<p>The <code>Document</code> class in Beanie is responsible for mapping and handling the data from the collection. It is inherited from the <code>BaseModel</code> Pydantic class, so it follows the same data typing and parsing behavior.</p> <pre><code>from typing import Optional\n\nimport pymongo\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\nclass Product(Document):  # This is the model\n    name: str\n    description: Optional[str] = None\n    price: Indexed(float, pymongo.DESCENDING)\n    category: Category\n\n    class Settings:\n        name = \"products\"\n        indexes = [\n            [\n                (\"name\", pymongo.TEXT),\n                (\"description\", pymongo.TEXT),\n            ],\n        ]\n</code></pre>"},{"location":"tutorial/defining-a-document/#fields","title":"Fields","text":"<p>As it was mentioned before, the <code>Document</code> class is inherited from the Pydantic <code>BaseModel</code> class.  It uses all the same patterns of <code>BaseModel</code>. But also it has special types of fields:</p> <ul> <li>id</li> <li>Indexed</li> </ul>"},{"location":"tutorial/defining-a-document/#id","title":"id","text":"<p><code>id</code> field of the <code>Document</code> class reflects the unique <code>_id</code> field of the MongoDB document.  Each object of the <code>Document</code> type has this field.  The default type of this is PydanticObjectId.</p> <pre><code>class Sample(Document):\n    num: int\n    description: str\n\nfoo = await Sample.find_one(Sample.num &gt; 5)\n\nprint(foo.id)  # This will print id\n\nbar = await Sample.get(foo.id)  # get by id\n</code></pre> <p>If you prefer another type, you can set it up too. For example, UUID:</p> <pre><code>from uuid import UUID, uuid4\n\nfrom pydantic import Field\n\n\nclass Sample(Document):\n    id: UUID = Field(default_factory=uuid4)\n    num: int\n    description: str\n</code></pre>"},{"location":"tutorial/defining-a-document/#indexed","title":"Indexed","text":"<p>To set up an index over a single field, the <code>Indexed</code> function can be used to wrap the type:</p> <pre><code>from beanie import Indexed\n\n\nclass Sample(Document):\n    num: Indexed(int)\n    description: str\n</code></pre> <p>The <code>Indexed</code> function takes an optional argument <code>index_type</code>, which may be set to a pymongo index type:</p> <pre><code>class Sample(Document):\n    description: Indexed(str, index_type=pymongo.TEXT)\n</code></pre> <p>The <code>Indexed</code> function also supports pymongo <code>IndexModel</code> kwargs arguments (PyMongo Documentation). </p> <p>For example, to create a <code>unique</code> index:</p> <pre><code>class Sample(Document):\n    name: Indexed(str, unique=True)\n</code></pre>"},{"location":"tutorial/defining-a-document/#settings","title":"Settings","text":"<p>The inner class <code>Settings</code> is used to configure:</p> <ul> <li>MongoDB collection name</li> <li>Indexes</li> <li>Encoders</li> <li>Use of <code>revision_id</code></li> <li>Use of cache</li> <li>Use of state management</li> <li>Validation on save</li> <li>Configure if nulls should be saved to the database</li> <li>Configure nesting depth for linked documents on the fetch operation</li> </ul>"},{"location":"tutorial/defining-a-document/#collection-name","title":"Collection name","text":"<p>To set MongoDB collection name, you can use the <code>name</code> field of the <code>Settings</code> inner class.</p> <pre><code>class Sample(Document):\n    num: int\n    description: str\n\n    class Settings:\n        name = \"samples\"\n</code></pre>"},{"location":"tutorial/defining-a-document/#indexes","title":"Indexes","text":"<p>The <code>indexes</code> field of the inner <code>Settings</code> class is responsible for the indexes' setup.  It is a list where items can be:</p> <ul> <li>Single key. Name of the document's field (this is equivalent to using the Indexed function described above)</li> <li>List of (key, direction) pairs. Key - string, name of the document's field. Direction - pymongo direction (   example: <code>pymongo.ASCENDING</code>)</li> <li><code>pymongo.IndexModel</code> instance - the most flexible   option. PyMongo Documentation</li> </ul> <pre><code>class DocumentTestModelWithIndex(Document):\n    test_int: int\n    test_list: List[SubDocument]\n    test_str: str\n\n    class Settings:\n        indexes = [\n            \"test_int\",\n            [\n                (\"test_int\", pymongo.ASCENDING),\n                (\"test_str\", pymongo.DESCENDING),\n            ],\n            IndexModel(\n                [(\"test_str\", pymongo.DESCENDING)],\n                name=\"test_string_index_DESCENDING\",\n            ),\n        ]\n</code></pre>"},{"location":"tutorial/defining-a-document/#encoders","title":"Encoders","text":"<p>The <code>bson_encoders</code> field of the inner <code>Settings</code> class defines how the Python types are going to be represented  when saved in the database. The default conversions can be overridden with this.</p> <p>The <code>ip</code> field in the following example is converted to String by default:</p> <pre><code>from ipaddress import IPv4Address\n\n\nclass Sample(Document):\n    ip: IPv4Address\n</code></pre> <p>Note: Default conversions are defined in <code>beanie.odm.utils.bson.ENCODERS_BY_TYPE</code>.</p> <p>However, if you want the <code>ip</code> field to be represented as Integer in the database,  you need to override the default encoders like this:</p> <pre><code>from ipaddress import IPv4Address\n\n\nclass Sample(Document):\n    ip: IPv4Address\n\n    class Settings:\n        bson_encoders = {\n          IPv4Address: int\n        }\n</code></pre> <p>You can also define your own function for the encoding:</p> <pre><code>from ipaddress import IPv4Address\n\n\ndef ipv4address_to_int(v: IPv4Address):\n    return int(v)\n\nclass Sample(Document):\n    ip: IPv4Address\n\n    class Settings:\n        bson_encoders = {\n          IPv4Address: ipv4address_to_int\n        }\n</code></pre>"},{"location":"tutorial/defining-a-document/#keep-nulls","title":"Keep nulls","text":"<p>By default, Beanie saves fields with <code>None</code> value as <code>null</code> in the database.</p> <p>But if you don't want to save <code>null</code> values, you can set <code>keep_nulls</code> to <code>False</code> in the <code>Settings</code> class:</p> <pre><code>class Sample(Document):\n    num: int\n    description: Optional[str] = None\n\n    class Settings:\n        keep_nulls = False\n</code></pre>"},{"location":"tutorial/defining-a-document/#nested-documents-depth","title":"Nested Documents Depth","text":"<p>It is possible to define nested linked documents with Beanie. Sometimes this can lead to infinite recursion. To prevent this, or to decrease the database load, you can limit the maximum nesting depth. By default, it is set to 3, which means it will fetch up to 3 levels of nested documents.</p> <p>You can configure:</p> <ul> <li>maximum depth for all linked documents</li> <li>depth for a specific linked document</li> </ul> <p>Maximum: <pre><code>class Sample(Document):\n    num: int\n    category: Link[Category]\n\n    class Settings:\n        max_nesting_depth = 2  \n        # Maximum nesting depth for all linked documents of this model\n</code></pre></p> <p>Specific: <pre><code>class Sample(Document):\n    num: int\n    category: Link[Category]\n\n    class Settings:\n        max_nesting_depths_per_field = {\n            \"category\": 1  # Nesting depth for a specific field\n        }\n</code></pre></p> <p>Also, you can limit the nesting depth during find operations. You can read more about this here.</p>"},{"location":"tutorial/event-based-actions/","title":"Event-based actions","text":"<p>You can register methods as pre- or post- actions for document events.</p> <p>Currently supported events:</p> <ul> <li>Insert</li> <li>Replace</li> <li>Update</li> <li>SaveChanges</li> <li>Delete</li> <li>ValidateOnSave</li> </ul> <p>Currently supported directions:</p> <ul> <li><code>Before</code></li> <li><code>After</code></li> </ul> <p>Current operations creating events:</p> <ul> <li><code>insert()</code> for Insert</li> <li><code>replace()</code> for Replace</li> <li><code>save()</code> triggers Insert if it is creating a new document, triggers Replace if it replaces an existing document</li> <li><code>save_changes()</code> for SaveChanges</li> <li><code>insert()</code>, <code>replace()</code>, <code>save_changes()</code>, and <code>save()</code> for ValidateOnSave</li> <li><code>set()</code>, <code>update()</code> for Update</li> <li><code>delete()</code> for Delete</li> </ul> <p>To register an action, you can use <code>@before_event</code> and <code>@after_event</code> decorators respectively:</p> <pre><code>from beanie import Insert, Replace\n\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @before_event(Insert)\n    def capitalize_name(self):\n        self.name = self.name.capitalize()\n\n    @after_event(Replace)\n    def num_change(self):\n        self.num -= 1\n</code></pre> <p>It is possible to register action for several events:</p> <pre><code>from beanie import Insert, Replace\n\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @before_event(Insert, Replace)\n    def capitalize_name(self):\n        self.name = self.name.capitalize()\n</code></pre> <p>This will capitalize the <code>name</code> field value before each document's Insert and Replace.</p> <p>And sync and async methods could work as actions.</p> <pre><code>from beanie import Insert, Replace\n\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @after_event(Insert, Replace)\n    async def send_callback(self):\n        await client.send(self.id)\n</code></pre> <p>Actions can be selectively skipped by passing the <code>skip_actions</code> argument when calling the operations that trigger events. <code>skip_actions</code> accepts a list of directions and action names.</p> <pre><code>from beanie import After, Before, Insert, Replace\n\n\nclass Sample(Document):\n    num: int\n    name: str\n\n    @before_event(Insert)\n    def capitalize_name(self):\n        self.name = self.name.capitalize()\n\n    @before_event(Replace)\n    def redact_name(self):\n        self.name = \"[REDACTED]\"\n\n    @after_event(Replace)\n    def num_change(self):\n        self.num -= 1\n\n\nsample = Sample()\n\n# capitalize_name will not be executed\nawait sample.insert(skip_actions=['capitalize_name'])\n\n# num_change will not be executed\nawait sample.replace(skip_actions=[After])\n\n# redact_name and num_change will not be executed\nawait sample.replace(skip_actions[Before, 'num_change'])\n</code></pre>"},{"location":"tutorial/finding-documents/","title":"Finding documents","text":"<p>To populate the database, please run the examples from the previous section of the tutorial  as we will be using the same setup here.</p>"},{"location":"tutorial/finding-documents/#finding-documents","title":"Finding documents","text":"<p>The basic syntax for finding multiple documents in the database is to call the class method <code>find()</code>  or it's synonym <code>find_many()</code> with some search criteria (see next section): </p> <pre><code>findresult = Product.find(search_criteria)\n</code></pre> <p>This returns a <code>FindMany</code> object, which can be used to access the results in different ways.  To loop through the results, use a <code>async for</code> loop:</p> <pre><code>async for result in Product.find(search_criteria):\n    print(result)\n</code></pre> <p>If you prefer a list of the results, then you can call <code>to_list()</code> method:</p> <pre><code>result = await Product.find(search_criteria).to_list()\n</code></pre> <p>To get the first document, you can use <code>.first_or_none()</code> method.  It returns the first found document or <code>None</code>, if no documents were found.</p> <pre><code>result = await Product.find(search_criteria).first_or_none()\n</code></pre>"},{"location":"tutorial/finding-documents/#search-criteria","title":"Search criteria","text":"<p>As search criteria, Beanie supports Python-based syntax. For comparisons Python comparison operators can be used on the class fields (and nested fields):</p> <pre><code>products = await Product.find(Product.price &lt; 10).to_list()\n</code></pre> <p>This is supported for the following operators: <code>==</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>!=</code>. Other MongoDB query operators can be used with the included wrappers.  For example, the <code>$in</code> operator can be used as follows:</p> <pre><code>from beanie.operators import In\n\nproducts = await Product.find(\n    In(Product.category.name, [\"Chocolate\", \"Fruits\"])\n).to_list()\n</code></pre> <p>The whole list of the find query operators can be found here.</p> <p>For more complex cases native PyMongo syntax is also supported:</p> <pre><code>products = await Product.find({\"price\": 1000}).to_list()\n</code></pre>"},{"location":"tutorial/finding-documents/#finding-single-documents","title":"Finding single documents","text":"<p>Sometimes you will only need to find a single document.  If you are searching by <code>id</code>, then you can use the get method:</p> <pre><code>bar = await Product.get(\"608da169eb9e17281f0ab2ff\")\n</code></pre> <p>To find a single document via a single search criterion, you can use the find_one method:</p> <pre><code>bar = await Product.find_one(Product.name == \"Peanut Bar\")\n</code></pre>"},{"location":"tutorial/finding-documents/#syncing-from-the-database","title":"Syncing from the Database","text":"<p>If you wish to apply changes from the database to the document, utilize the sync method:</p> <pre><code>await bar.sync()\n</code></pre> <p>Two merging strategies are available: <code>local</code> and <code>remote</code>.</p>"},{"location":"tutorial/finding-documents/#remote-merge-strategy","title":"Remote Merge Strategy","text":"<p>The remote merge strategy replaces the local document with the one from the database, disregarding local changes:</p> <p><pre><code>from beanie import MergeStrategy\n\nawait bar.sync(merge_strategy=MergeStrategy.remote)\n</code></pre> The remote merge strategy is the default.</p>"},{"location":"tutorial/finding-documents/#local-merge-strategy","title":"Local Merge Strategy","text":"<p>The local merge strategy retains changes made locally to the document and updates other fields from the database. BE CAREFUL: it may raise an <code>ApplyChangesException</code> in case of a merging conflict.</p> <pre><code>from beanie import MergeStrategy\n\nawait bar.sync(merge_strategy=MergeStrategy.local)\n</code></pre>"},{"location":"tutorial/finding-documents/#more-complex-queries","title":"More complex queries","text":""},{"location":"tutorial/finding-documents/#multiple-search-criteria","title":"Multiple search criteria","text":"<p>If you have multiple criteria to search against,  you can pass them as separate arguments to any of the <code>find</code> functions:</p> <pre><code>chocolates = await Product.find(\n    Product.category.name == \"Chocolate\",\n    Product.price &lt; 5\n).to_list()\n</code></pre> <p>Alternatively, you can chain <code>find</code> methods:</p> <pre><code>chocolates = await Product\n              .find(Product.category.name == \"Chocolate\")\n              .find(Product.price &lt; 5).to_list()\n</code></pre>"},{"location":"tutorial/finding-documents/#sorting","title":"Sorting","text":"<p>Sorting can be done with the sort method.</p> <p>You can pass it one or multiple fields to sort by. You may optionally specify a <code>+</code> or <code>-</code>  (denoting ascending and descending respectively).</p> <pre><code>chocolates = await Product.find(\n    Product.category.name == \"Chocolate\").sort(-Product.price,+Product.name).to_list()\n</code></pre> <p>You can also specify fields as strings or as tuples:</p> <pre><code>chocolates = await Product.find(\n    Product.category.name == \"Chocolate\").sort(\"-price\",\"+name\").to_list()\n\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").sort(\n    [\n        (Product.price, pymongo.DESCENDING),\n        (Product.name, pymongo.ASCENDING),\n    ]\n).to_list()\n</code></pre>"},{"location":"tutorial/finding-documents/#skip-and-limit","title":"Skip and limit","text":"<p>To skip a certain number of documents, or limit the total number of elements returned,  the <code>skip</code> and <code>limit</code> methods can be used: <pre><code>chocolates = await Product.find(\n    Product.category.name == \"Chocolate\").skip(2).to_list()\n\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").limit(2).to_list()\n</code></pre></p>"},{"location":"tutorial/finding-documents/#projections","title":"Projections","text":"<p>When only a part of a document is required, projections can save a lot of database bandwidth and processing. For simple projections we can just define a pydantic model with the required fields and pass it to <code>project()</code> method:</p> <pre><code>class ProductShortView(BaseModel):\n    name: str\n    price: float\n\n\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").project(ProductShortView).to_list()\n</code></pre> <p>For more complex projections an inner <code>Settings</code> class with a <code>projection</code> field can be added:</p> <pre><code>class ProductView(BaseModel):\n    name: str\n    category: str\n\n    class Settings:\n        projection = {\"name\": 1, \"category\": \"$category.name\"}\n\n\nchocolates = await Product.find(\n    Product.category.name == \"Chocolate\").project(ProductView).to_list()\n</code></pre>"},{"location":"tutorial/finding-documents/#finding-all-documents","title":"Finding all documents","text":"<p>If you ever want to find all documents, you can use the <code>find_all()</code> class method. This is equivalent to <code>find({})</code>.</p>"},{"location":"tutorial/indexes/","title":"Indexes","text":""},{"location":"tutorial/indexes/#indexes-setup","title":"Indexes setup","text":"<p>There are more than one way to set up indexes using Beanie</p>"},{"location":"tutorial/indexes/#indexed-function","title":"Indexed function","text":"<p>To set up an index over a single field, the <code>Indexed</code> function can be used to wrap the type  and does not require a <code>Settings</code> class:</p> <pre><code>from beanie import Document, Indexed\n\n\nclass Sample(Document):\n    num: Annotated[int, Indexed()]\n    description: str\n</code></pre> <p>The <code>Indexed</code> function takes an optional <code>index_type</code> argument, which may be set to a pymongo index type:</p> <pre><code>import pymongo\n\nfrom beanie import Document, Indexed\n\n\nclass Sample(Document):\n    description: Annotated[str, Indexed(index_type=pymongo.TEXT)]\n</code></pre> <p>The <code>Indexed</code> function also supports PyMongo's <code>IndexModel</code> kwargs arguments (see the PyMongo Documentation for details). </p> <p>For example, to create a <code>unique</code> index:</p> <pre><code>from beanie import Document, Indexed\n\n\nclass Sample(Document):\n    name: Annotated[str, Indexed(unique=True)]\n</code></pre> <p>The <code>Indexed</code> function can also be used directly in the type annotation, by giving it the wrapped type as the first argument. Note that this might not work with some Pydantic V2 types, such as <code>UUID4</code> or <code>EmailStr</code>.</p> <pre><code>from beanie import Document, Indexed\n\n\nclass Sample(Document):\n    name: Indexed(str, unique=True)\n</code></pre>"},{"location":"tutorial/indexes/#multi-field-indexes","title":"Multi-field indexes","text":"<p>The <code>indexes</code> field of the inner <code>Settings</code> class is responsible for more complex indexes.  It is a list where items can be:</p> <ul> <li>Single key. Name of the document's field (this is equivalent to using the Indexed function described above without any additional arguments)</li> <li>List of (key, direction) pairs. Key - string, name of the document's field. Direction - pymongo direction (   example: <code>pymongo.ASCENDING</code>)</li> <li><code>pymongo.IndexModel</code> instance - the most flexible   option. PyMongo Documentation</li> </ul> <pre><code>import pymongo\nfrom pymongo import IndexModel\n\nfrom beanie import Document\n\n\nclass Sample(Document):\n    test_int: int\n    test_str: str\n\n    class Settings:\n        indexes = [\n            \"test_int\",\n            [\n                (\"test_int\", pymongo.ASCENDING),\n                (\"test_str\", pymongo.DESCENDING),\n            ],\n            IndexModel(\n                [(\"test_str\", pymongo.DESCENDING)],\n                name=\"test_string_index_DESCENDING\",\n            ),\n        ]\n</code></pre>"},{"location":"tutorial/inheritance/","title":"Inheritance","text":""},{"location":"tutorial/inheritance/#inheritance-for-multi-model-use-case","title":"Inheritance for multi-model use case","text":"<p>Beanie <code>Documents</code> support inheritance as any other Python classes. But there are additional features available if you mark the root model with the parameter <code>is_root = True</code> in the inner Settings class.</p> <p>This behavior is similar to <code>UnionDoc</code>, but you don't need an additional entity. Parent <code>Document</code> act like a \"controller\", that handles proper storing and fetches different <code>Document</code> types. Also, parent <code>Document</code> can have some shared attributes which are propagated to all children. All classes in the inheritance chain can be used as <code>Link</code> in foreign <code>Documents</code>.</p> <p>Depending on the business logic, parent <code>Document</code> can be like an \"abstract\" class that is not used to store objects of its type (like in the example below), as well as can be a full-fledged entity, like its children.</p>"},{"location":"tutorial/inheritance/#defining-models","title":"Defining models","text":"<p>To set the root model you have to set <code>is_root = True</code> in the inner Settings class. All the inherited documents (on any level) will be stored in the same collection.</p> <pre><code>from typing import Optional, List\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic import BaseModel\nfrom beanie import Document, Link, init_beanie\n\n\nclass Vehicle(Document):\n    \"\"\"Inheritance scheme bellow\"\"\"\n    #               Vehicle\n    #              /   |   \\\n    #             /    |    \\\n    #        Bicycle  Bike  Car\n    #                         \\\n    #                          \\\n    #                          Bus\n    # shared attribute for all children\n    color: str\n\n    class Settings:\n        is_root = True\n\n\nclass Fuelled(BaseModel):\n    \"\"\"Just a mixin\"\"\"\n    fuel: Optional[str]\n\n\nclass Bicycle(Vehicle):\n    \"\"\"Derived from Vehicle, will use its collection\"\"\"\n    frame: int\n    wheels: int\n\n\nclass Bike(Vehicle, Fuelled):\n    ...\n\n\nclass Car(Vehicle, Fuelled):\n    body: str\n\n\nclass Bus(Car, Fuelled):\n    \"\"\"Inheritance chain is Vehicle -&gt; Car -&gt; Bus, it is also stored in Vehicle collection\"\"\"\n    seats: int\n\n\nclass Owner(Document):\n    vehicles: Optional[List[Link[Vehicle]]]\n</code></pre>"},{"location":"tutorial/inheritance/#inserts","title":"Inserts","text":"<p>Inserts work the same way as usual</p> <pre><code>client = AsyncIOMotorClient()\nawait init_beanie(client.test_db, document_models=[Vehicle, Bicycle, Bike, Car, Bus, Owner])\n\nbike_1 = await Bike(color='black', fuel='gasoline').insert()\n\ncar_1 = await Car(color='grey', body='sedan', fuel='gasoline').insert()\ncar_2 = await Car(color='white', body='crossover', fuel='diesel').insert()\n\nbus_1 = await Bus(color='white', seats=80, body='bus', fuel='diesel').insert()\nbus_2 = await Bus(color='yellow', seats=26, body='minibus', fuel='diesel').insert()\n\nowner = await Owner(name='John', vehicles=[car_1, car_2, bus_1]).insert()\n</code></pre>"},{"location":"tutorial/inheritance/#find-operations","title":"Find operations","text":"<p>With parameter <code>with_children = True</code> the find query results will contain all the children classes' objects.</p> <pre><code># this query returns vehicles of all types that have white color, because `with_children` is True\nwhite_vehicles = await Vehicle.find(Vehicle.color == 'white', with_children=True).to_list()\n# [\n#    Bicycle(..., color='white', frame=54, wheels=29),\n#    Car(fuel='diesel', ..., color='white', body='crossover'),\n#    Bus(fuel='diesel', ..., color='white', body='bus', seats=80)\n# ]\n</code></pre> <p>If the search is based on a child, the query returns this child type and all sub-children (with parameter <code>with_children=True</code>)</p> <pre><code>cars_and_buses = await Car.find(Car.fuel == 'diesel', with_children=True).to_list()\n# [\n#     Car(fuel='diesel', ..., color='white', body='crossover'),\n#     Bus(fuel='diesel', ..., color='white', body='bus', seats=80),\n#     Bus(fuel='diesel', ..., color='yellow', body='minibus', seats=26)\n# ]\n</code></pre> <p>If you need to return objects of the specific class only, you can use this class for finding:</p> <pre><code># however it is possible to limit by Vehicle type\ncars_only = await Car.find().to_list()\n# [\n#     Car(fuel='gasoline', ..., color='grey', body='sedan'),\n#     Car(fuel='diesel', ..., color='white', body='crossover')\n# ]\n</code></pre> <p>To get a single Document it is not necessary to know the type. You can query using the parent class</p> <pre><code>await Vehicle.get(bus_2.id, with_children=True)\n# returns Bus instance:\n# Bus(fuel='diesel', ..., color='yellow', body='minibus', seats=26)\n</code></pre>"},{"location":"tutorial/inheritance/#relations","title":"Relations","text":"<p>Linked documents will be resolved into the respective classes</p> <pre><code>owner = await Owner.get(owner.id, fetch_links=True)\n\nprint(owner.vehicles)\n# [\n#    Car(fuel='diesel', ..., color='white', body='crossover'),\n#    Bus(fuel='diesel', ..., color='white', body='bus', seats=80),\n#    Car(fuel='gasoline', ..., color='grey', body='sedan')\n# ]\n</code></pre> <p>The same result will be if the owner gets objects without fetching the links, and they will be fetched manually later</p>"},{"location":"tutorial/inheritance/#other","title":"Other","text":"<p>All other operations work the same way as for simple Documents</p> <pre><code>await Bike.find().update({\"$set\": {Bike.color: 'yellow'}})\nawait Car.find_one(Car.body == 'sedan')\n</code></pre>"},{"location":"tutorial/initialization/","title":"Initialization","text":"<p>Beanie uses Motor as an async database engine.  To initialize previously created documents, you should provide a Motor database instance  and a list of your document models to the <code>init_beanie(...)</code> function, as it is shown in the example:</p> <pre><code>from beanie import init_beanie, Document\nfrom motor.motor_asyncio import AsyncIOMotorClient\n\nclass Sample(Document):\n    name: str\n\nasync def init():\n    # Create Motor client\n    client = AsyncIOMotorClient(\n        \"mongodb://user:pass@host:27017\"\n    )\n\n    # Initialize beanie with the Sample document class and a database\n    await init_beanie(database=client.db_name, document_models=[Sample])\n</code></pre> <p>This creates the collection (if necessary) and sets up any indexes that are defined.</p> <p><code>init_beanie</code> supports not only a list of classes as the document_models argument,  but also strings with dot-separated paths:</p> <pre><code>await init_beanie(\n        database=client.db_name,\n        document_models=[\n            \"app.models.DemoDocument\",\n        ],\n    )\n</code></pre>"},{"location":"tutorial/initialization/#warning","title":"Warning","text":"<p><code>init_beanie</code> supports the parameter named <code>allow_index_dropping</code> that will drop indexes from your collections.  <code>allow_index_dropping</code> is by default set to <code>False</code>. If you set this to <code>True</code>,  ensure that you are not managing your indexes in another manner.  If you are, these will be deleted when setting <code>allow_index_dropping=True</code>.</p>"},{"location":"tutorial/inserting-into-the-database/","title":"Insert the documents","text":"<p>Beanie documents behave just like pydantic models (because they subclass <code>pydantic.BaseModel</code>). Hence, a document can be created in a similar fashion to pydantic:</p> <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\n\nfrom beanie import Document, Indexed\n\n\nclass Category(BaseModel):\n    name: str\n    description: str\n\n\nclass Product(Document):  # This is the model\n    name: str\n    description: Optional[str] = None\n    price: Indexed(float)\n    category: Category\n\n    class Settings:\n        name = \"products\"\n\n\nchocolate = Category(name=\"Chocolate\", description=\"A preparation of roasted and ground cacao seeds.\")\ntonybar = Product(name=\"Tony's\", price=5.95, category=chocolate)\nmarsbar = Product(name=\"Mars\", price=1, category=chocolate)\n</code></pre> <p>This however does not save the documents to the database yet.</p>"},{"location":"tutorial/inserting-into-the-database/#insert-a-single-document","title":"Insert a single document","text":"<p>To insert a document into the database, you can call either <code>insert()</code> or <code>create()</code> on it (they are synonyms):</p> <p><pre><code>await tonybar.insert()\nawait marsbar.create()  # does exactly the same as insert()\n</code></pre> You can also call <code>save()</code>, which behaves in the same manner for new documents, but will also update existing documents.  See the section on updating of this tutorial for more details.</p> <p>If you prefer, you can also call the <code>insert_one</code> class method: </p> <pre><code>await Product.insert_one(tonybar)\n</code></pre>"},{"location":"tutorial/inserting-into-the-database/#inserting-many-documents","title":"Inserting many documents","text":"<p>To reduce the number of database queries,  similarly typed documents should be inserted together by calling the class method <code>insert_many</code>:</p> <pre><code>await Product.insert_many([tonybar,marsbar])\n</code></pre>"},{"location":"tutorial/lazy-parsing/","title":"Lazy parsing","text":""},{"location":"tutorial/lazy-parsing/#using-lazy-parsing-in-queries","title":"Using Lazy Parsing in Queries","text":"<p>Lazy parsing allows you to skip the parsing and validation process for documents and instead call it on demand for each field separately. This can be useful for optimizing performance in certain scenarios.</p> <p>To use lazy parsing in your queries, you can pass the <code>lazy_parse=True</code> parameter to your find method.</p> <p>Here's an example of how to use lazy parsing in a find query:</p> <pre><code>await Sample.find(Sample.number == 10, lazy_parse=True).to_list()\n</code></pre> <p>By setting lazy_parse=True, the parsing and validation process will be skipped and be called on demand when the respective fields will be used. This can potentially improve the performance of your query by reducing the amount of processing required upfront. However, keep in mind that using lazy parsing may also introduce some additional overhead when accessing the fields later on.</p>"},{"location":"tutorial/migrations/","title":"Migrations","text":""},{"location":"tutorial/migrations/#attention","title":"Attention!","text":""},{"location":"tutorial/migrations/#create","title":"Create","text":"<p>To create a new migration, run:</p> <pre><code>beanie new-migration -n migration_name -p relative/path/to/migrations/directory/\n</code></pre> <p>It will create a file named <code>*_migration_name.py</code> in the directory <code>relative/path/to/migrations/directory/</code></p> <p>Migration file contains two classes: <code>Forward</code> and <code>Backward</code>.  Each one contains instructions to roll migration respectively forward and backward.</p>"},{"location":"tutorial/migrations/#run","title":"Run","text":"<p>Attention: By default, migrations use transactions. This approach only works with  MongoDB replica sets. If you prefer to run migrations without transactions, pass the <code>--no-use-transaction</code> flag to the <code>migrate</code> command. However, be aware that this approach is risky, as there is no way to roll back migrations without transactions.</p> <p>To roll one forward migration, run:</p> <pre><code>beanie migrate -uri 'mongodb+srv://user:pass@host' -db db -p relative/path/to/migrations/directory/ --distance 1\n</code></pre> <p>To roll all forward migrations, run:</p> <pre><code>beanie migrate -uri 'mongodb://user:pass@host' -db db -p relative/path/to/migrations/directory/\n</code></pre> <p>To roll one backward migration, run:</p> <pre><code>beanie migrate -uri 'mongodb+srv://user:pass@host' -db db -p relative/path/to/migrations/directory/ --distance 1 --backward\n</code></pre> <p>To roll all backward migrations, run:</p> <pre><code>beanie migrate -uri 'mongodb+srv://user:pass@host' -db db -p relative/path/to/migrations/directory/ --backward\n</code></pre> <p>To show the help message with all the parameters and descriptions, run:</p> <pre><code>beanie migrate --help\n</code></pre>"},{"location":"tutorial/migrations/#migration-types","title":"Migration types","text":"<p>Migration class contains instructions - decorated async functions. There are two types of instructions:</p> <ul> <li>Iterative migration - instruction that iterates over all the documents of the input_document collection and updates it. Most convenient to use, should be used in 99% cases.</li> <li>Free fall migrations - instruction where user can write any logic. Most flexible, but verbose.</li> </ul>"},{"location":"tutorial/migrations/#iterative-migrations","title":"Iterative migrations","text":"<p>To mark a function as iterative migration, <code>@iterative_migration()</code> decorator must be used.  The function itself must accept typed <code>input_document</code> and <code>output_document</code> arguments. Like here:</p> <pre><code>@iterative_migration()\n\n\nasync def name_to_title(\n        self, input_document: OldNote, output_document: Note\n):\n</code></pre>"},{"location":"tutorial/migrations/#a-simple-example-of-field-name-changing","title":"A simple example of field name changing","text":"<p>There are the next models:</p> <pre><code>class Tag(BaseModel):\n    color: str\n    name: str\n\n\nclass OldNote(Document):\n    name: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Note(Document):\n    title: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n</code></pre> <p>To migrate from <code>OldNote</code> to <code>Note</code>, file <code>name</code> has to be renamed to <code>title</code>.</p> <p>Forward migration:</p> <pre><code>class Forward:\n    @iterative_migration()\n    async def name_to_title(\n            self, input_document: OldNote, output_document: Note\n    ):\n        output_document.title = input_document.name\n</code></pre> <p>Backward migration:</p> <pre><code>class Backward:\n    @iterative_migration()\n    async def title_to_name(\n            self, input_document: Note, output_document: OldNote\n    ):\n        output_document.name = input_document.title\n</code></pre> <p>And a little more complex example:</p> <p><pre><code>from pydantic.main import BaseModel\n\nfrom beanie import Document, iterative_migration\n\n\nclass OldTag(BaseModel):\n    color: str\n    name: str\n\n\nclass Tag(BaseModel):\n    color: str\n    title: str\n\n\nclass OldNote(Document):\n    title: str\n    tag: OldTag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Note(Document):\n    title: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Forward:\n    @iterative_migration()\n    async def change_color(\n            self, input_document: OldNote, output_document: Note\n    ):\n        output_document.tag.title = input_document.tag.name\n\n\nclass Backward:\n    @iterative_migration()\n    async def change_title(\n            self, input_document: Note, output_document: OldNote\n    ):\n        output_document.tag.name = input_document.tag.title\n</code></pre> All the examples of migrations can be found by link</p>"},{"location":"tutorial/migrations/#free-fall-migrations","title":"Free fall migrations","text":"<p>It is a much more flexible migration type, which allows the implementation of any migration logic.  But at the same time, it is more verbose.</p> <p>To mark function as a free fall migration,  <code>@free_fall_migration()</code> decorator with the list of Document classes must be used.  Function itself accepts <code>session</code> as an argument.  It is used in order to roll back the migration in case something has gone wrong.  To be able to roll back, please pass session to the Documents methods. Like here:</p> <pre><code>@free_fall_migration(document_models=[OldNote, Note])\nasync def name_to_title(self, session):\n    async for old_note in OldNote.find_all():\n        new_note = Note(\n            id=old_note.id, title=old_note.name, tag=old_note.tag\n        )\n        await new_note.replace(session=session)\n</code></pre>"},{"location":"tutorial/migrations/#the-same-example-as-for-the-iterative-migration-but-with-free-fall-migration-type","title":"The same example as for the iterative migration, but with free fall migration type","text":"<p><pre><code>from pydantic.main import BaseModel\n\nfrom beanie import Document, free_fall_migration\n\n\nclass Tag(BaseModel):\n    color: str\n    name: str\n\n\nclass OldNote(Document):\n    name: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Note(Document):\n    title: str\n    tag: Tag\n\n    class Settings:\n        name = \"notes\"\n\n\nclass Forward:\n    @free_fall_migration(document_models=[OldNote, Note])\n    async def name_to_title(self, session):\n        async for old_note in OldNote.find_all():\n            new_note = Note(\n                id=old_note.id, title=old_note.name, tag=old_note.tag\n            )\n            await new_note.replace(session=session)\n\n\nclass Backward:\n    @free_fall_migration(document_models=[OldNote, Note])\n    async def title_to_name(self, session):\n        async for old_note in Note.find_all():\n            new_note = OldNote(\n                id=old_note.id, name=old_note.title, tag=old_note.tag\n            )\n            await new_note.replace(session=session)\n</code></pre> All the examples of migrations can be found by link</p>"},{"location":"tutorial/multi-model-pattern/","title":"Multi-model pattern","text":"<p>Documents with different schemas could be stored in a single collection and managed correctly.  <code>UnionDoc</code> class is used for this.</p> <p>It supports <code>find</code> and <code>aggregate</code> methods.  For <code>find</code>, it will fetch all the found documents into the respective <code>Document</code> classes.</p> <p>Documents with <code>union_doc</code> in their settings can still be used in <code>find</code> and other queries.  Queries of one such class will not see the data of others.</p>"},{"location":"tutorial/multi-model-pattern/#example","title":"Example","text":"<p>Create documents:</p> <pre><code>from beanie import Document, UnionDoc\n\n\nclass Parent(UnionDoc):  # Union\n    class Settings:\n        name = \"union_doc_collection\"  # Collection name\n        class_id = \"_class_id\"  # _class_id is the default beanie internal field used to filter children Documents\n\n\nclass One(Document):\n    int_field: int = 0\n    shared: int = 0        \n\n    class Settings:\n        name = \"One\" # Name used to filer union document 'One', default to class name\n        union_doc = Parent\n\n\nclass Two(Document):\n    str_field: str = \"test\"\n    shared: int = 0\n\n    class Settings:\n        union_doc = Parent\n</code></pre> <p>The schemas could be incompatible.</p> <p>Insert a document</p> <pre><code>await One().insert()\nawait One().insert()\nawait One().insert()\n\nawait Two().insert()\n</code></pre> <p>Find all the documents of the first type:</p> <pre><code>docs = await One.all().to_list()\nprint(len(docs))\n\n&gt;&gt; 3 # It found only documents of class One\n</code></pre> <p>Of the second type:</p> <pre><code>docs = await Two.all().to_list()\nprint(len(docs))\n\n&gt;&gt; 1 # It found only documents of class Two\n</code></pre> <p>Of both:</p> <pre><code>docs = await Parent.all().to_list()\nprint(len(docs))\n\n&gt;&gt; 4 # instances of both classes will be in the output here\n</code></pre> <p>Aggregations will work separately for these two document classes too.</p>"},{"location":"tutorial/on-save-validation/","title":"On save validation","text":"<p>Pydantic has a very useful config to validate values on assignment - <code>validate_assignment = True</code>.  But, unfortunately, this is an expensive operation and doesn't fit some use cases. You can validate all the values before saving the document (<code>insert</code>, <code>replace</code>, <code>save</code>, <code>save_changes</code>)  with beanie config <code>validate_on_save</code> instead.</p> <p>This feature must be turned on in the <code>Settings</code> inner class explicitly:</p> <pre><code>class Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        validate_on_save = True\n</code></pre> <p>If any field has a wrong value,  it will raise an error on write operations (<code>insert</code>, <code>replace</code>, <code>save</code>, <code>save_changes</code>).</p> <pre><code>sample = Sample.find_one(Sample.name == \"Test\")\nsample.num = \"wrong value type\"\n\n# Next call will raise an error\nawait sample.replace()\n</code></pre>"},{"location":"tutorial/relations/","title":"Relations","text":"<p>The document can contain links to other documents in their fields.</p> <p>Only top-level fields are fully supported for now.</p> <p>The following field types are supported:</p> <ul> <li><code>Link[...]</code></li> <li><code>Optional[Link[...]]</code></li> <li><code>List[Link[...]]</code></li> <li><code>Optional[List[Link[...]]]</code></li> </ul> <p>Also, backward links are supported:</p> <ul> <li><code>BackLink[...]</code></li> <li><code>Optional[BackLink[...]]</code></li> <li><code>List[BackLink[...]]</code></li> <li><code>Optional[List[BackLink[...]]]</code></li> </ul> <p>Direct link to the document:</p> <pre><code>from beanie import Document, Link\n\n\nclass Door(Document):\n    height: int = 2\n    width: int = 1\n\n\nclass House(Document):\n    name: str\n    door: Link[Door]\n</code></pre> <p>Optional direct link to the document:</p> <pre><code>from typing import Optional\n\nfrom beanie import Document, Link\n\n\nclass Door(Document):\n    height: int = 2\n    width: int = 1\n\n\nclass House(Document):\n    name: str\n    door: Optional[Link[Door]]\n</code></pre> <p>List of the links:</p> <pre><code>from typing import List\n\nfrom beanie import Document, Link\n\n\nclass Window(Document):\n    x: int = 10\n    y: int = 10\n\n\nclass House(Document):\n    name: str\n    door: Link[Door]\n    windows: List[Link[Window]]\n</code></pre> <p>Optional list of the links:</p> <pre><code>from typing import List, Optional\n\nfrom beanie import Document, Link\n\nclass Window(Document):\n    x: int = 10\n    y: int = 10\n\nclass Yard(Document):\n    v: int = 10\n    y: int = 10\n\nclass House(Document):\n    name: str\n    door: Link[Door]\n    windows: List[Link[Window]]\n    yards: Optional[List[Link[Yard]]]\n</code></pre> <p>Other link patterns are not supported at this moment. If you need something more specific for your use-case,  please open an issue on the GitHub page - https://github.com/roman-right/beanie</p>"},{"location":"tutorial/relations/#write","title":"Write","text":"<p>The following write methods support relations:</p> <ul> <li><code>insert(...)</code></li> <li><code>replace(...)</code></li> <li><code>save(...)</code></li> </ul> <p>To apply a write method to the linked documents, you should pass the respective <code>link_rule</code> argument</p> <pre><code>house.windows = [Window(x=100, y=100)]\nhouse.name = \"NEW NAME\"\n\n# The next call will insert a new window object and replace the house instance with updated data\nawait house.save(link_rule=WriteRules.WRITE)\n\n# `insert` and `replace` methods will work the same way\n</code></pre> <p>Otherwise, Beanie can ignore internal links with the <code>link_rule</code> parameter <code>WriteRules.DO_NOTHING</code></p> <pre><code>house.door.height = 3\nhouse.name = \"NEW NAME\"\n\n# The next call will just replace the house instance with new data, but the linked door object will not be synced\nawait house.replace(link_rule=WriteRules.DO_NOTHING)\n\n# `insert` and `save` methods will work the same way\n</code></pre>"},{"location":"tutorial/relations/#fetch","title":"Fetch","text":""},{"location":"tutorial/relations/#prefetch","title":"Prefetch","text":"<p>You can fetch linked documents on the find query step using the <code>fetch_links</code> parameter </p> <p><pre><code>houses = await House.find(\n    House.name == \"test\", \n    fetch_links=True\n).to_list()\n</code></pre> Supported find methods: - <code>find</code> - <code>find_one</code> - <code>get</code></p> <p>Beanie uses the single aggregation query under the hood to fetch all the linked documents.  This operation is very effective.</p> <p>If a direct link is referred to a non-existent document,  after fetching it will remain the object of the <code>Link</code> class.</p> <p>Fetching will ignore non-existent documents for the list of links fields.</p>"},{"location":"tutorial/relations/#search-by-linked-documents-fields","title":"Search by linked documents fields","text":"<p>If the <code>fetch_links</code> parameter is set to <code>True</code>, search by linked documents fields is available.</p> <p>By field of the direct link:</p> <pre><code>houses = await House.find(\n    House.door.height == 2,\n    fetch_links=True\n).to_list()\n</code></pre> <p>By list of links:</p> <pre><code>houses = await House.find(\n    House.windows.x &gt; 10,\n    fetch_links=True\n).to_list()\n</code></pre> <p>Search by <code>id</code> of the linked documents works using the following syntax:</p> <pre><code>houses = await House.find(\n    House.door.id == PydanticObjectId(\"DOOR_ID_HERE\")\n).to_list()\n</code></pre> <p>It works the same way with <code>fetch_links</code> equal to <code>True</code> and <code>False</code> and for <code>find_many</code> and <code>find_one</code> methods.</p>"},{"location":"tutorial/relations/#nested-links","title":"Nested links","text":"<p>With Beanie you can set up nested links. Document can even link to itself. This can lead to infinite recursion. To prevent this, or to decrease the database load, you can limit the nesting depth during find operations.</p> <pre><code>from beanie import Document, Link\nfrom typing import Optional\n\nclass SelfLinkedSample(Document):\n    name: str\n    left: Optional[Link[\"SelfLinkedSample\"]]\n    right: Optional[Link[\"SelfLinkedSample\"]]\n</code></pre> <p>You can set up depth for all linked documents independently of the field:</p> <pre><code>await SelfLinkedSample.find(\n    SelfLinkedSample.name == \"test\",\n    fetch_links=True,\n    nesting_depth=2\n).to_list()\n</code></pre> <p>Or you can set up depth for a specific field:</p> <pre><code>await SelfLinkedSample.find(\n    SelfLinkedSample.name == \"test\",\n    fetch_links=True,\n    nesting_depths_per_field={\n        \"left\": 1,\n        \"right\": 2\n    }\n).to_list()\n</code></pre> <p>Also, you can set up the maximum nesting depth on the document definition level. You can read more about this here.</p>"},{"location":"tutorial/relations/#on-demand-fetch","title":"On-demand fetch","text":"<p>If you don't use prefetching, linked documents will be presented as objects of the <code>Link</code> class. </p> <p>You can fetch them manually afterwards.</p> <p>To fetch all the linked documents, you can use the <code>fetch_all_links</code> method</p> <pre><code>await house.fetch_all_links()\n</code></pre> <p>It will fetch all the linked documents and replace <code>Link</code> objects with them.</p> <p>Otherwise, you can fetch a single field:</p> <pre><code>await house.fetch_link(House.door)\n</code></pre> <p>This will fetch the Door object and put it into the <code>door</code> field of the <code>house</code> object.</p>"},{"location":"tutorial/relations/#delete","title":"Delete","text":"<p>Delete method works the same way as write operations, but it uses other rules.</p> <p>To delete all the links on the document deletion,  you should use the <code>DeleteRules.DELETE_LINKS</code> value for the <code>link_rule</code> parameter:</p> <pre><code>await house.delete(link_rule=DeleteRules.DELETE_LINKS)\n</code></pre> <p>To keep linked documents, you can use the <code>DO_NOTHING</code> rule:</p> <pre><code>await house.delete(link_rule=DeleteRules.DO_NOTHING)\n</code></pre>"},{"location":"tutorial/relations/#back-links","title":"Back Links","text":"<p>To init the back link you should have a document with the direct or list of links to the current document.</p> <pre><code>from typing import List\n\nfrom beanie import Document, BackLink, Link\nfrom pydantic import Field\n\n\nclass House(Document):\n    name: str\n    door: Link[\"Door\"]\n    owners: List[Link[\"Person\"]]\n\n\nclass Door(Document):\n    height: int = 2\n    width: int = 1\n    house: BackLink[House] = Field(original_field=\"door\")\n\n\nclass Person(Document):\n    name: str\n    house: List[BackLink[House]] = Field(original_field=\"owners\")\n</code></pre> <p>The <code>original_field</code> parameter is required for the back link field.</p> <p>Back links support all the operations that normal links support, but are virtual. This means that when searching the database, you will need to include <code>fetch_links=True</code> (see Finding documents.), or you will recieve an empty 'BackLink' virtual object. It is not possible to <code>fetch()</code> this virtual link after the initial search.</p>"},{"location":"tutorial/relations/#limitations","title":"Limitations","text":"<ul> <li>Find operations with the <code>fetch_links</code> parameter can not be used in the chaning with <code>delete</code> and <code>update</code> methods.</li> </ul>"},{"location":"tutorial/revision/","title":"Revision","text":"<p>This feature helps with concurrent operations.  It stores <code>revision_id</code> together with the document and changes it on each document update.  If the application with an older local copy of the document tries to change it, an exception will be raised.  Only when the local copy is synced with the database, the application will be allowed to change the data.  This helps to avoid data losses.</p>"},{"location":"tutorial/revision/#be-aware","title":"Be aware","text":"<p>revision id feature may work incorrectly with BulkWriter.</p>"},{"location":"tutorial/revision/#usage","title":"Usage","text":"<p>This feature must be explicitly turned on in the <code>Settings</code> inner class:</p> <pre><code>class Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_revision = True\n</code></pre> <p>Any changing operation will check if the local copy of the document has the up-to-date <code>revision_id</code> value:</p> <pre><code>s = await Sample.find_one(Sample.name=\"TestName\")\ns.num = 10\n\n# If a concurrent process already changed the doc, the next operation will raise an error\nawait s.replace()\n</code></pre> <p>If you want to ignore revision and apply all the changes even if the local copy is outdated,  you can use the <code>ignore_revision</code> parameter:</p> <pre><code>await s.replace(ignore_revision=True)\n</code></pre>"},{"location":"tutorial/state-management/","title":"State Management","text":"<p>Beanie can keep the document state synced with the database in order to find local changes and save only them.</p> <p>This feature must be explicitly turned on in the <code>Settings</code> inner class:</p> <pre><code>class Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_state_management = True\n</code></pre> <p>Beanie keeps the current changes (not yet saved in the database) by default (with <code>use_state_management = True</code>), AND the previous changes (saved to the database) with <code>state_management_save_previous = True</code>.</p> <pre><code>class Sample(Document):\n    num: int\n    name: str\n\n    class Settings:\n        use_state_management = True\n        state_management_save_previous = True\n</code></pre> <p>Every new save override the previous changes and clears the current changes.</p>"},{"location":"tutorial/state-management/#saving-changes","title":"Saving changes","text":"<p>To save only changed values, the <code>save_changes()</code> method should be used.</p> <pre><code>s = await Sample.find_one(Sample.name == \"Test\")\ns.num = 100\nawait s.save_changes()\n</code></pre> <p>The <code>save_changes()</code> method can only be used with already inserted documents.</p>"},{"location":"tutorial/state-management/#interacting-with-changes","title":"Interacting with changes","text":"<p>Beanie exposes several methods that can be used to interact with the saved changes:</p> <pre><code>s = await Sample.find_one(Sample.name == \"Test\")\n\ns.is_changed == False\ns.get_changes == {}\n\ns.num = 200\n\ns.is_changed == True\ns.get_changes() == {\"num\": 200}\n\ns.rollback()\n\ns.is_changed == False\ns.get_changes() == {}\n</code></pre> <p>And similar methods can be used with the previous changes that have been saved in the database if <code>state_management_save_previous</code> is set to <code>True</code>:</p> <pre><code>s = await Sample.find_one(Sample.name == \"Test\")\n\ns.num = 200\nawait s.save_changes()\n\ns.has_changed == True\ns.get_previous_changes() == {\"num\": 200}\ns.get_changes() == {}\n</code></pre>"},{"location":"tutorial/state-management/#options","title":"Options","text":"<p>By default, state management will merge the changes made to nested objects,  which is fine for most cases as it is non-destructive and does not re-assign the whole object  if only one of its attributes changed:</p> <pre><code>from typing import Dict\n\n\nclass Item(Document):\n    name: str\n    attributes: Dict[str, float]\n\n    class Settings:\n        use_state_management = True\n</code></pre> <pre><code>i = Item(name=\"Test\", attributes={\"attribute_1\": 1.0, \"attribute_2\": 2.0})\nawait i.insert()\ni.attributes = {\"attribute_1\": 1.0}\nawait i.save_changes()\n# Changes will consist of: {\"attributes.attribute_1\": 1.0}\n# Keeping attribute_2\n</code></pre> <p>However, there are some cases where you would want to replace the whole object when one of its attributes changed. You can enable the <code>state_management_replace_objects</code> attribute in your model's <code>Settings</code> inner class:</p> <pre><code>from typing import Dict\n\n\nclass Item(Document):\n    name: str\n    attributes: Dict[str, float]\n\n    class Settings:\n        use_state_management = True\n        state_management_replace_objects = True\n</code></pre> <p>With this setting activated, the whole object will be overridden when one attribute of the nested object is changed:</p> <pre><code>i = Item(name=\"Test\", attributes={\"attribute_1\": 1.0, \"attribute_2\": 2.0})\nawait i.insert()\ni.attributes.attribute_1 = 1.0\nawait i.save_changes()\n# Changes will consist of: {\"attributes.attribute_1\": 1.0, \"attributes.attribute_2\": 2.0}\n# Keeping attribute_2\n</code></pre> <p>When the whole object is assigned, the whole nested object will be overridden:</p> <pre><code>i = Item(name=\"Test\", attributes={\"attribute_1\": 1.0, \"attribute_2\": 2.0})\nawait i.insert()\ni.attributes = {\"attribute_1\": 1.0}\nawait i.save_changes()\n# Changes will consist of: {\"attributes\": {\"attribute_1\": 1.0}}\n# Removing attribute_2\n</code></pre>"},{"location":"tutorial/time-series/","title":"Time series","text":"<p>You can set up a timeseries collection using the inner <code>Settings</code> class.</p> <p>Be aware, timeseries collections a supported by MongoDB 5.0 and higher only. The fields <code>bucket_max_span_seconds</code> and <code>bucket_rounding_seconds</code> however require MongoDB 6.3 or higher</p> <pre><code>from datetime import datetime\n\nfrom beanie import Document, TimeSeriesConfig, Granularity\nfrom pydantic import Field\n\n\nclass Sample(Document):\n    ts: datetime = Field(default_factory=datetime.now)\n    meta: str\n\n    class Settings:\n        timeseries = TimeSeriesConfig(\n            time_field=\"ts\", #  Required\n            meta_field=\"meta\", #  Optional\n            granularity=Granularity.hours, #  Optional\n            bucket_max_span_seconds=3600,  #  Optional\n            bucket_rounding_seconds=3600,  #  Optional\n            expire_after_seconds=2  #  Optional\n        )\n</code></pre> <p>TimeSeriesConfig fields reflect the respective parameters of the MongoDB timeseries creation function.</p> <p>MongoDB documentation: https://docs.mongodb.com/manual/core/timeseries-collections/</p>"},{"location":"tutorial/updating-%26-deleting/","title":"Updating &amp; Deleting","text":"<p>Now that we know how to find documents, how do we change them or delete them?</p>"},{"location":"tutorial/updating-%26-deleting/#saving-changes-to-existing-documents","title":"Saving changes to existing documents","text":"<p>The easiest way to change a document in the database is to use either the <code>replace</code> or <code>save</code> method on an altered document.  These methods both write the document to the database,  but <code>replace</code> will raise an exception when the document does not exist yet, while <code>save</code> will insert the document. </p> <p>Using <code>save()</code> method:</p> <pre><code>bar = await Product.find_one(Product.name == \"Mars\")\nbar.price = 10\nawait bar.save()\n</code></pre> <p>Otherwise, use the <code>replace()</code> method, which throws: - a <code>ValueError</code> if the document does not have an <code>id</code> yet, or - a <code>beanie.exceptions.DocumentNotFound</code> if it does, but the <code>id</code> is not present in the collection</p> <pre><code>bar.price = 10\ntry:\n    await bar.replace()\nexcept (ValueError, beanie.exceptions.DocumentNotFound):\n    print(\"Can't replace a non existing document\")\n</code></pre> <p>Note that these methods require multiple queries to the database and replace the entire document with the new version.  A more tailored solution can often be created by applying update queries directly on the database level.</p>"},{"location":"tutorial/updating-%26-deleting/#update-queries","title":"Update queries","text":"<p>Update queries can be performed on the result of a <code>find</code> or <code>find_one</code> query,  or on a document that was returned from an earlier query.  Simpler updates can be performed using the <code>set</code>, <code>inc</code>, and <code>current_date</code> methods:</p> <pre><code>bar = await Product.find_one(Product.name == \"Mars\")\nawait bar.set({Product.name:\"Gold bar\"})\nbar = await Product.find(Product.price &gt; .5).inc({Product.price: 1})\n</code></pre> <p>More complex update operations can be performed by calling <code>update()</code> with an update operator, similar to find queries:</p> <pre><code>await Product.find_one(Product.name == \"Tony's\").update(Set({Product.price: 3.33}))\n</code></pre> <p>The whole list of the update query operators can be found here.</p> <p>Native MongoDB syntax is also supported:</p> <pre><code>await Product.find_one(Product.name == \"Tony's\").update({\"$set\": {Product.price: 3.33}})\n</code></pre>"},{"location":"tutorial/updating-%26-deleting/#upsert","title":"Upsert","text":"<p>To insert a document when no documents are matched against the search criteria, the <code>upsert</code> method can be used:</p> <pre><code>await Product.find_one(Product.name == \"Tony's\").upsert(\n    Set({Product.price: 3.33}), \n    on_insert=Product(name=\"Tony's\", price=3.33, category=chocolate)\n)\n</code></pre>"},{"location":"tutorial/updating-%26-deleting/#deleting-documents","title":"Deleting documents","text":"<p>Deleting objects works just like updating them, you simply call <code>delete()</code> on the found documents:</p> <pre><code>bar = await Product.find_one(Product.name == \"Milka\")\nawait bar.delete()\n\nawait Product.find_one(Product.name == \"Milka\").delete()\n\nawait Product.find(Product.category.name == \"Chocolate\").delete()\n</code></pre>"},{"location":"tutorial/updating-%26-deleting/#response-type","title":"Response Type","text":"<p>For the object methods <code>update</code> and <code>upsert</code>, you can use the <code>response_type</code> parameter to specify the type of response.</p> <p>The options are: - <code>UpdateResponse.UPDATE_RESULT</code> - returns the result of the update operation. - <code>UpdateResponse.NEW_DOCUMENT</code> - returns the newly updated document. - <code>UpdateResponse.OLD_DOCUMENT</code> - returns the document before the update.</p>"},{"location":"tutorial/views/","title":"Views","text":"<p>Virtual views are aggregation pipelines stored in MongoDB that act as collections for reading operations. You can use the <code>View</code> class the same way as <code>Document</code> for <code>find</code> and <code>aggregate</code> operations.</p>"},{"location":"tutorial/views/#here-are-some-examples","title":"Here are some examples.","text":"<p>Create a view:</p> <pre><code>from pydantic import Field\n\nfrom beanie import Document, View\n\n\nclass Bike(Document):\n    type: str\n    frame_size: int\n    is_new: bool\n\n\nclass Metrics(View):\n    type: str = Field(alias=\"_id\")\n    number: int\n    new: int\n\n    class Settings:\n        source = Bike\n        pipeline = [\n            {\n                \"$group\": {\n                    \"_id\": \"$type\",\n                    \"number\": {\"$sum\": 1},\n                    \"new\": {\"$sum\": {\"$cond\": [\"$is_new\", 1, 0]}}\n                }\n            },\n        ]\n</code></pre> <p>Initialize Beanie:</p> <pre><code>from motor.motor_asyncio import AsyncIOMotorClient\n\nfrom beanie import init_beanie\n\n\nasync def main():\n    uri = \"mongodb://beanie:beanie@localhost:27017\"\n    client = AsyncIOMotorClient(uri)\n    db = client.bikes\n\n    await init_beanie(\n        database=db, \n        document_models=[Bike, Metrics],\n        recreate_views=True,\n    )\n</code></pre> <p>Create bikes:</p> <pre><code>await Bike(type=\"Mountain\", frame_size=54, is_new=True).insert()\nawait Bike(type=\"Mountain\", frame_size=60, is_new=False).insert()\nawait Bike(type=\"Road\", frame_size=52, is_new=True).insert()\nawait Bike(type=\"Road\", frame_size=54, is_new=True).insert()\nawait Bike(type=\"Road\", frame_size=58, is_new=False).insert()\n</code></pre> <p>Find metrics for <code>type == \"Road\"</code></p> <pre><code>results = await Metrics.find(Metrics.type == \"Road\").to_list()\nprint(results)\n\n&gt;&gt; [Metrics(type='Road', number=3, new=2)]\n</code></pre> <p>Aggregate over metrics to get the count of all the new bikes:</p> <pre><code>results = await Metrics.aggregate([{\n    \"$group\": {\n        \"_id\": None,\n        \"new_total\": {\"$sum\": \"$new\"}\n    }\n}]).to_list()\n\nprint(results)\n\n&gt;&gt; [{'_id': None, 'new_total': 3}]\n</code></pre> <p>A better result can be achieved by using find query aggregation syntactic sugar:</p> <pre><code>results = await Metrics.all().sum(Metrics.new)\n\nprint(results)\n\n&gt;&gt; 3\n</code></pre>"}]}