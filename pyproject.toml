[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "beanie"
version = "1.30.0"
description = "Asynchronous Python ODM for MongoDB"
readme = "README.md"
requires-python = ">=3.9,<4.0"
license = { file="LICENSE" }
authors = [
    {name = "Roman Right", email = "roman-right@protonmail.com"}
]
keywords = ["mongodb", "odm", "orm", "pydantic", "mongo", "async", "python"]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "pydantic>=1.10.18,<3.0",
    "motor>=2.5.0,<4.0.0",
    "click>=7",
    "tomli>=2.2.1,<3.0.0; python_version < '3.11'",
    "lazy-model==0.2.0",
    "typing-extensions>=4.7",
]

[project.optional-dependencies]
test = [
    "pre-commit>=3.5.0",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "dnspython>=2.1.0",
    "pyright>=0",
    "asgi-lifespan>=1.0.1",
    "httpx>=0.23.0",
    "fastapi>=0.100",
    "pydantic-settings>=2",
    "pydantic-extra-types>=2",
    "pydantic[email]",
]
doc = [
    "Pygments>=2.8.0",
    "Markdown>=3.3",
    "pydoc-markdown>=4.8",
    "mkdocs>=1.4",
    "mkdocs-material>=9.0",
    "jinja2>=3.0.3"
]
queue = ["beanie-batteries-queue>=0.2"]
ci = [
    "tomli>=2.2.1,<3.0.0; python_version < '3.11'",
    "tomli-w>=1.0.0,<2.0.0",
    "requests",
    "types-requests",
]
aws = ["motor[aws]>=2.5.0,<4.0.0"]
encryption = ["motor[encryption]>=2.5.0,<4.0.0"]
gssapi = ["motor[gssapi]>=2.5.0,<4.0.0"]
ocsp = ["motor[ocsp]>=2.5.0,<4.0.0"]
snappy = ["motor[snappy]>=2.5.0,<4.0.0"]
zstd = ["motor[zstd]>=2.5.0,<4.0.0"]

[project.urls]
homepage = "https://beanie-odm.dev"
repository = "https://github.com/roman-right/beanie"

[project.scripts]
beanie = "beanie.executors.migrate:migrations"

# TOOLS

[tool.coverage.run]
branch = true
source = ["beanie"]

[tool.coverage.report]
ignore_errors = true
show_missing = true
fail_under = 80
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    'if __name__ == .__main__.:'
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--cov"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.beanie.migrations]
path = "beanie/example_migration"
database_name = "beanie_db"

[tool.mypy]
ignore_missing_imports = true

[tool.pyright]
include = ["tests/typing", "beanie"]

[tool.ruff]
line-length = 100
fix = false
target-version = "py39"
exclude = [
    ".git",
    ".mypy_cache",
    ".vscode",
    "__pycache__",
    ".ruff_cache",
    ".venv",
    "venv",
    "build",
    "dist",
    "docs"
]

[tool.ruff.lint.pycodestyle]
# max-doc-length = 72 # PEP-8

[tool.ruff.lint]
preview = true
select =  [
    # pycodestyle
    "E",
    "W",
     # isort
    "I",
    # pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # Ruff specific
    "RUF"
]
ignore = [
    "E501",
    "RUF005",
    "RUF012",
    "RUF022",
    "SIM112",
    # Ignored for now, pending fix
    "B006",
    "B904",
    "RUF015",
    "RUF036",
    "SIM102",
    "SIM103",
    "SIM108",
    "SIM118"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Allow lambda expressions in tests
    "E711",
    # Suppress useless attribute access in tests
    "B018"
]
